import{r as I,a9 as V,ad as E,ae as x,af as w,m as n}from"./index-7e609792.js";import{f as u,b as C,w as z,t as R,G as k}from"./vendor-50817465.js";/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const P={control:{type:[String,Number,Object],default:void 0},value:{type:String,default:void 0},clearable:{type:Boolean,default:void 0},clearIcon:{type:String,default:void 0},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1},size:{type:String,default:void 0},status:String,trim:{type:Boolean,default:void 0},"onUpdate:value":[Function,Array],onChange:[Function,Array],onClear:[Function,Array],onCompositionStart:[Function,Array],onCompositionEnd:[Function,Array],onInput:[Function,Array],onFocus:[Function,Array],onBlur:[Function,Array]},O={...P,addonAfter:{type:String,default:void 0},addonBefore:{type:String,default:void 0},borderless:{type:Boolean,default:void 0},prefix:{type:String,default:void 0},suffix:{type:String,default:void 0}};/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */function U(t,r){const{accessor:a,control:c}=I();V(c);const F=E(t,r),S=x(t,c),g=u(()=>t.clearable??r.clearable),b=u(()=>t.clearIcon??r.clearIcon),h=u(()=>!a.disabled&&!t.readonly&&!!a.value),p=u(()=>t.trim??r.trim),s=C(!1),d=e=>{s.value=!0,n(t.onFocus,e)},f=e=>{s.value=!1,a.markAsBlurred(),n(t.onBlur,e),p.value&&v(e.target.value.trim())},{elementRef:m,focus:A,blur:B}=w({handleFocus:d,handleBlur:f}),v=e=>{const o=R(a.value);e!==o&&(a.setValue(e),n(t.onChange,e,o),k(()=>i()))},i=()=>{const e=m.value,o=a.value??"";e&&e.value!==o&&(e.value=o)};z(()=>a.value,()=>i());const l=C(!1),y=(e,o=!0)=>{o&&n(t.onInput,e),!l.value&&v(e.target.value)};return{elementRef:m,accessor:a,mergedSize:F,mergedStatus:S,clearable:g,clearIcon:b,clearVisible:h,isFocused:s,isComposing:l,focus:A,blur:B,handleInput:y,handleCompositionStart:e=>{l.value=!0,n(t.onCompositionStart,e)},handleCompositionEnd:e=>{n(t.onCompositionEnd,e),l.value&&(l.value=!1,y(e,!1))},handleFocus:d,handleBlur:f,handleClear:e=>{a.setValue(""),n(t.onClear,e)},syncValue:i}}export{P as a,O as i,U as u};
