var w=Object.defineProperty;var V=(r,s,t)=>s in r?w(r,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[s]=t;var h=(r,s,t)=>(V(r,typeof s!="symbol"?s+"":s,t),t);import{ag as u,ah as i,ai as b}from"./index-7e609792.js";import{f as g,w as n,P as o}from"./vendor-50817465.js";/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class y extends u{constructor(t,e,a){super(t,e,a);h(this,"length");this.length=g(()=>this._controls.value.length),this._watchValid(),this._watchValue(),this._watchStatus(),this._watchBlurred(),this._watchDirty()}setValue(t,e){t.forEach((a,l)=>{const c=this.at(l);c&&c.setValue(a,e)})}getValue(t={}){const{skipDisabled:e}=t;return this._controls.value.filter(l=>!e||!l.disabled.value).map(l=>l.getValue(t))}_calculateInitValue(){return this.getValue()}_forEachControls(t){this._controls.value.forEach(t)}_find(t){return this.at(t)}at(t){return this._controls.value[t]}push(t){t.setParent(this),this._controls.value=[...this._controls.value,t]}insert(t,e){e.setParent(this);const a=[...this._controls.value];a.splice(t,0,e),this._controls.value=a}removeAt(t){const e=[...this._controls.value];e.splice(t,1),this._controls.value=e}setControl(t,e){e.setParent(this);const a=[...this._controls.value];a.splice(t,1,e),this._controls.value=a}_watchValid(){n(this._valueRef,()=>{this.trigger==="change"&&this._validate()})}_watchValue(){o(()=>{this._valueRef.value=this.getValue()})}_watchStatus(){o(()=>{this._status.value=this._errors.value?"invalid":"valid"}),o(()=>{let t="valid";const e=this._controls.value;for(const a of e){const l=a.status.value;if(l==="invalid"){t="invalid";break}else l==="validating"&&(t="validating")}this._controlsStatus.value=t})}_watchBlurred(){o(()=>{let t=!1;const e=this._controls.value;for(const a of e)if(a.blurred.value){t=!0;break}this._blurred.value=t})}_watchDirty(){o(()=>{let t=!1;const e=this._controls.value;for(const a of e)if(a.dirty.value){t=!0;break}this._dirty.value=t})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class _ extends u{constructor(s,t,e){super(void 0,t,e,s),this._initValue=s,this._watchValid(),this._watchStatus()}setValue(s,t={}){this._valueRef.value=s,t.dirty&&this.markAsDirty(),t.blur&&this.markAsBlurred()}getValue(){return this._valueRef.value}_calculateInitValue(){return this._initValue}_forEachControls(s){}_find(s){}_watchValid(){n(this._valueRef,()=>{this.trigger==="change"&&this._validate()})}_watchStatus(){n(this._errors,s=>{this._status.value=s?"invalid":"valid"})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class v extends u{constructor(s,t,e){super(s,t,e),this._watchValid(),this._watchValue(),this._watchStatus(),this._watchBlurred(),this._watchDirty()}setValue(s,t){const e=this._controls.value;Object.keys(s).forEach(a=>{const l=e[a];l&&l.setValue(s[a],t)})}getValue(s={}){const{skipDisabled:t}=s,e={};return this._forEachControls((a,l)=>{t&&a.disabled.value||(e[l]=a.getValue(s))}),e}_calculateInitValue(){return this.getValue()}_forEachControls(s){const t=this._controls.value;Object.keys(t).forEach(e=>s(t[e],e))}_find(s){const t=this._controls.value;return i(t,s)?t[s]:void 0}addControl(s,t){const e={...this._controls.value};i(e,s)||(t.setParent(this),e[s]=t,this._controls.value=e)}removeControl(s){const t={...this._controls.value};delete t[s],this._controls.value=t}setControl(s,t){t.setParent(this);const e={...this._controls.value};e[s]=t,this._controls.value=e}_watchValid(){n(this._valueRef,()=>{this.trigger==="change"&&this._validate()})}_watchValue(){o(()=>{this._valueRef.value=this.getValue()})}_watchStatus(){o(()=>{this._status.value=this._errors.value?"invalid":"valid"}),o(()=>{let s="valid";const t=this._controls.value;for(const e in t){if(!i(t,e))continue;const a=t[e].status.value;if(a==="invalid"){s="invalid";break}else a==="validating"&&(s="validating")}this._controlsStatus.value=s})}_watchBlurred(){o(()=>{let s=!1;const t=this._controls.value;for(const e in t)if(i(t,e)&&t[e].blurred.value){s=!0;break}this._blurred.value=s})}_watchDirty(){o(()=>{let s=!1;const t=this._controls.value;for(const e in t)if(i(t,e)&&t[e].dirty.value){s=!0;break}this._dirty.value=s})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */function k(r,s,t){const e=d(r);return new v(e,s,t)}function E(r,s,t){const e=r.map(a=>f(a));return new y(e,s,t)}function S(r,s,t){return new _(r,s,t)}function d(r){const s={};return Object.keys(r).forEach(t=>{s[t]=f(r[t])}),s}function f(r){if(b(r))return r;if(Array.isArray(r)){const[t,e,a]=r;return new _(t,e,a)}const s=d(r);return new v(s)}export{k as a,S as b,E as u};
