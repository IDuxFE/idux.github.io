import{A as V,R as S,aL as _,L as D}from"./index-a5e3e5c4.js";import{x as P,l as b,c as r,i as q,z as d,f as B,b as z,a3 as L,r as R,q as T}from"./vendor-8f7e6b71.js";/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const y=Symbol("progressContext");/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const x=100;function j(s){return!s||s<0?0:s>x?x:s}const O=s=>{const t=[];return Object.keys(s).forEach(e=>{const n=parseFloat(e.replace(/%/g,""));isNaN(n)||t.push({key:n,value:s[e]})}),t.sort((e,n)=>e.key-n.key)},X=(s,t)=>{const{from:e=t?getComputedStyle(t).getPropertyValue("--ix-color-primary"):"#1c6eff",to:n=t?getComputedStyle(t).getPropertyValue("--ix-color-primary"):"#1c6eff",direction:l="to right",...a}=s;if(Object.keys(a).length!==0){const c=O(a).map(({key:u,value:g})=>`${g} ${u}%`).join(", ");return`linear-gradient(${l}, ${c})`}return`linear-gradient(${l}, ${e}, ${n})`},Y=s=>O(s).map(({key:t,value:e})=>({offset:`${t}%`,color:e})),W=P({setup(s,{slots:t}){const{props:e,config:n,mergedPrefixCls:l,status:a,percent:c,successPercent:u}=b(y),g=r(()=>{var f;return(f=e.format)!=null?f:n.format}),v=r(()=>g.value(c.value,u.value)),h=r(()=>a.value==="success"||a.value==="normal"&&c.value===x),o=r(()=>a.value==="exception"),$=r(()=>q(e.format)||!(h.value||o.value)),m=r(()=>{var f,k;return(k=(f=e.icons)==null?void 0:f.success)!=null?k:n.icon.success}),i=r(()=>{var f,k;return(k=(f=e.icons)==null?void 0:f.exception)!=null?k:n.icon.exception}),C=()=>{if($.value)return v.value;const f=l.value;return h.value&&m.value?N(m.value,`${f}-success-icon`):o.value&&i.value?N(i.value,`${f}-exception-icon`):null};return()=>{var k;if(e.hideInfo)return null;const f=(k=t.format)!=null?k:t.default;return d("div",{class:`${l.value}-info`},[f?f({percent:c.value,successPercent:u.value}):C()])}}});function N(s,t){return B(s)?d(V,{class:t,name:s},null):s}const K=6,H=P({name:"IxProgressCircle",setup(s,{slots:t}){const{props:e,mergedPrefixCls:n,mergedStrokeLinecap:l,percent:a,successPercent:c}=b(y),u=r(()=>`${n.value}-circle`),g=r(()=>S(e.strokeWidth,K)),v=r(()=>z(e.strokeColor)),h=r(()=>`${n.value}-gradient-${_()}`),o=r(()=>{var w,G;const p=e.type==="circle",I=50-g.value/2;return{isGradient:v.value,percent:a.value,linearGradientId:h.value,radius:I,gapPosition:(w=e.gapPosition)!=null?w:p?"top":"bottom",len:Math.PI*2*I,gapDegree:S((G=e.gapDegree)!=null?G:p?0:75)}}),$=r(()=>v.value?Y(e.strokeColor):[]),m=J(o),i=Q(o),C=U(o,u,e,a,c),f=r(()=>{var p;return{stroke:(p=e.trailColor)!=null?p:"#f5f5f5","fill-opacity":"0","stroke-linecap":l.value,"stroke-width":g.value,d:m.value}}),k=r(()=>({"fill-opacity":"0","stroke-linecap":l.value,"stroke-width":a.value?g.value:0,d:m.value})),F=r(()=>{const p=u.value;return{[p]:!0,[`${p}-gradient`]:v.value}}),A=r(()=>({width:e.width&&`${e.width}px`,height:e.width&&`${e.width}px`,fontSize:e.width&&`${S(e.width)*.15+6}px`})),E=()=>v.value?d("defs",null,[d("linearGradient",{id:h.value,x1:"100%",y1:"0%",x2:"0%",y2:"0%"},[$.value.map(p=>d("stop",{offset:p.offset,"stop-color":p.color},null))])]):null,M=()=>C.value.map(p=>d("path",L({class:[`${u.value}-path`,...p.strokeClasses],style:p.strokePathStyle,stroke:p.stroke},k.value),null));return()=>d("div",{class:F.value,style:A.value},[d("svg",{viewBox:"0 0 100 100"},[E(),d("path",L({class:`${u.value}-trail`,style:i.value},f.value),null),M()]),d(W,null,t)])}});function J(s){return r(()=>{const{radius:t,gapPosition:e}=s.value;let n=0,l=-t,a=0,c=t*-2;switch(e){case"left":n=-t,l=0,a=t*2,c=0;break;case"right":n=t,l=0,a=t*-2,c=0;break;case"bottom":l=t,c=t*2;break}return`M 50,50 m ${n},${l}
       a ${t},${t} 0 1 1 ${a},${-c}
       a ${t},${t} 0 1 1 ${-a},${c}`})}function Q(s){return r(()=>{const{len:t,gapDegree:e}=s.value;return{strokeDasharray:`${t-e}px ${t}px`,strokeDashoffset:`-${e/2}px`,transition:"stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s"}})}function U(s,t,e,n,l){return r(()=>{var o;const{gapDegree:a,len:c,isGradient:u,linearGradientId:g}=s.value,v=l.value>0?[l.value,n.value]:[n.value],h=(o=e.success)==null?void 0:o.strokeColor;return v.map(($,m)=>{const i=v.length>1&&m===0;return{stroke:u&&!i?`url(#${g})`:void 0,strokeClasses:[!u&&i?`${t.value}-success`:"",u?"":`${t.value}-bg`],strokePathStyle:{stroke:u?void 0:i?h:e.strokeColor,transition:"stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s",strokeDasharray:`${$/100*(c-a)}px ${c}px`,strokeDashoffset:`-${a/2}px`}}}).reverse()})}const Z=P({name:"IxProgressLine",setup(s,{slots:t}){const{props:e,mergedPrefixCls:n,mergedSize:l,mergedStrokeLinecap:a,percent:c,successPercent:u}=b(y),g=r(()=>`${n.value}-line`),v=R(),h=r(()=>{const i=g.value;return{[i]:!0,[`${i}-${l.value}`]:!0,[`${i}-round`]:a.value==="round"}}),o=r(()=>({background:e.trailColor})),$=r(()=>{var i;return{height:`${e.strokeWidth}px`,width:`${u.value}%`,background:(i=e.success)==null?void 0:i.strokeColor}}),m=r(()=>({height:`${e.strokeWidth}px`,width:`${c.value}%`,background:z(e.strokeColor)?X(e.strokeColor,v.value):e.strokeColor}));return()=>{const i=g.value;return d("div",{ref:v,class:h.value},[d("div",{class:`${i}-outer`},[d("div",{class:`${i}-inner`,style:o.value},[!!u.value&&d("div",{class:`${i}-success-bg`,style:$.value},null),d("div",{class:`${i}-bg`,style:m.value},null)])]),d(W,null,t)])}}});/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const ee=["normal","success","exception","active"],te={type:{type:String,default:"line"},format:Function,percent:{type:Number,default:0},status:String,hideInfo:{type:Boolean,default:!1},success:Object,trailColor:String,strokeColor:[String,Object],strokeLinecap:String,strokeWidth:Number,gapDegree:Number,gapPosition:String,width:{type:Number,default:132},size:String,icons:Object},se=P({name:"IxProgress",props:te,setup(s,{slots:t}){const e=D("progress"),n=D("common"),l=r(()=>`${n.prefixCls}-progress`),a=r(()=>j(s.percent)),c=r(()=>{var o;return j((o=s.success)==null?void 0:o.percent)}),u=r(()=>{var o;return(o=s.size)!=null?o:e.size}),g=r(()=>{var o;return(o=s.strokeLinecap)!=null?o:e.strokeLinecap}),v=r(()=>{var o;return!ee.includes(s.status)&&(a.value>=x||c.value>=x)?"success":(o=s.status)!=null?o:"normal"}),h=r(()=>{const o=l.value;return{[o]:!0,[`${o}-${v.value}`]:!!v.value}});return T(y,{props:s,config:e,mergedPrefixCls:l,mergedSize:u,mergedStrokeLinecap:g,percent:a,successPercent:c,status:v}),()=>{const o=s.type==="line"?Z:H;return d(o,{class:h.value},t)}}});/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const ne=se;export{ne as I};
