var f=Object.defineProperty;var b=(o,s,t)=>s in o?f(o,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[s]=t;var c=(o,s,t)=>(b(o,typeof s!="symbol"?s+"":s,t),t);import{b0 as i,c as w,H as a,x as V,b1 as n,b2 as y}from"./index-8aa71336.js";/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class p extends i{constructor(t,r,e){super(t,r,e);c(this,"length");this.length=w(()=>this._controls.value.length),this._watchValue(),this._watchStatus(),this._watchBlurred(),this._watchDirty()}setValue(t,r){t.forEach((e,l)=>{const u=this.at(l);u&&u.setValue(e,r)})}getValue(t={}){const{skipDisabled:r}=t;return this._controls.value.filter(l=>!r||!l.disabled.value).map(l=>l.getValue(t))}_calculateInitValue(){return this.getValue()}_forEachControls(t){this._controls.value.forEach(t)}_find(t){return this.at(t)}at(t){return this._controls.value[t]}push(t){t.setParent(this),this._controls.value=[...this._controls.value,t]}insert(t,r){r.setParent(this);const e=[...this._controls.value];e.splice(t,0,r),this._controls.value=e}removeAt(t){const r=[...this._controls.value];r.splice(t,1),this._controls.value=r}clearControls(){this._controls.value=[]}setControl(t,r){r.setParent(this);const e=[...this._controls.value];e.splice(t,1,r),this._controls.value=e}_watchValue(){a(()=>{this._valueRef.value=this.getValue()})}_watchStatus(){a(()=>{this._status.value=this._errors.value?"invalid":"valid"}),a(()=>{let t="valid";const r=this._controls.value;for(const e of r){const l=e.status.value;if(l==="invalid"){t="invalid";break}else l==="validating"&&(t="validating")}this._controlsStatus.value=t})}_watchBlurred(){a(()=>{let t=!1;const r=this._controls.value;for(const e of r)if(e.blurred.value){t=!0;break}this._blurred.value=t})}_watchDirty(){a(()=>{let t=!1;const r=this._controls.value;for(const e of r)if(e.dirty.value){t=!0;break}this._dirty.value=t})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class h extends i{constructor(s,t,r){super(void 0,t,r,s),this._initValue=s,this._watchStatus()}setValue(s,t={}){this._valueRef.value=s,t.dirty&&this.markAsDirty(),t.blur&&this.markAsBlurred()}getValue(){return this._valueRef.value}_calculateInitValue(){return this._initValue}_forEachControls(s){}_find(s){}_watchStatus(){V(this._errors,s=>{this._status.value=s?"invalid":"valid"})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class v extends i{constructor(s,t,r){super(s,t,r),this._watchValue(),this._watchStatus(),this._watchBlurred(),this._watchDirty()}setValue(s,t){const r=this._controls.value;Object.keys(s).forEach(e=>{const l=r[e];l&&l.setValue(s[e],t)})}getValue(s={}){const{skipDisabled:t}=s,r={};return this._forEachControls((e,l)=>{t&&e.disabled.value||(r[l]=e.getValue(s))}),r}_calculateInitValue(){return this.getValue()}_forEachControls(s){const t=this._controls.value;Object.keys(t).forEach(r=>s(t[r],r))}_find(s){const t=this._controls.value;return n(t,s)?t[s]:void 0}addControl(s,t){const r={...this._controls.value};n(r,s)||(t.setParent(this),r[s]=t,this._controls.value=r)}removeControl(s){const t={...this._controls.value};delete t[s],this._controls.value=t}setControl(s,t){t.setParent(this);const r={...this._controls.value};r[s]=t,this._controls.value=r}_watchValue(){a(()=>{this._valueRef.value=this.getValue()})}_watchStatus(){a(()=>{this._status.value=this._errors.value?"invalid":"valid"}),a(()=>{let s="valid";const t=this._controls.value;for(const r in t){if(!n(t,r))continue;const e=t[r].status.value;if(e==="invalid"){s="invalid";break}else e==="validating"&&(s="validating")}this._controlsStatus.value=s})}_watchBlurred(){a(()=>{let s=!1;const t=this._controls.value;for(const r in t)if(n(t,r)&&t[r].blurred.value){s=!0;break}this._blurred.value=s})}_watchDirty(){a(()=>{let s=!1;const t=this._controls.value;for(const r in t)if(n(t,r)&&t[r].dirty.value){s=!0;break}this._dirty.value=s})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */function m(o,s,t){const r=_(o);return new v(r,s,t)}function g(o,s,t){const r=o.map(e=>d(e));return new p(r,s,t)}function E(o,s,t){return new h(o,s,t)}function _(o){const s={};return Object.keys(o).forEach(t=>{s[t]=d(o[t])}),s}function d(o){if(y(o))return o;if(Array.isArray(o)){const[t,r,e]=o;return new h(t,r,e)}const s=_(o);return new v(s)}export{m as a,E as b,g as u};
