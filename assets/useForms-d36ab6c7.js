var w=Object.defineProperty;var V=(a,s,t)=>s in a?w(a,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[s]=t;var h=(a,s,t)=>(V(a,typeof s!="symbol"?s+"":s,t),t);import{ag as u,ah as i,ai as b}from"./index-cbea949a.js";import{f as g,w as n,P as o}from"./vendor-334c0a91.js";/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class y extends u{constructor(t,e,r){super(t,e,r);h(this,"length");this.length=g(()=>this._controls.value.length),this._watchValid(),this._watchValue(),this._watchStatus(),this._watchBlurred(),this._watchDirty()}setValue(t,e){t.forEach((r,l)=>{const c=this.at(l);c&&c.setValue(r,e)})}getValue(t={}){const{skipDisabled:e}=t;return this._controls.value.filter(l=>!e||!l.disabled.value).map(l=>l.getValue(t))}_calculateInitValue(){return this.getValue()}_forEachControls(t){this._controls.value.forEach(t)}_find(t){return this.at(t)}at(t){return this._controls.value[t]}push(t){t.setParent(this),this._controls.value=[...this._controls.value,t]}insert(t,e){e.setParent(this);const r=[...this._controls.value];r.splice(t,0,e),this._controls.value=r}removeAt(t){const e=[...this._controls.value];e.splice(t,1),this._controls.value=e}clearControls(){this._controls.value=[]}setControl(t,e){e.setParent(this);const r=[...this._controls.value];r.splice(t,1,e),this._controls.value=r}_watchValid(){n(this._valueRef,()=>{this.trigger==="change"&&this._validate()})}_watchValue(){o(()=>{this._valueRef.value=this.getValue()})}_watchStatus(){o(()=>{this._status.value=this._errors.value?"invalid":"valid"}),o(()=>{let t="valid";const e=this._controls.value;for(const r of e){const l=r.status.value;if(l==="invalid"){t="invalid";break}else l==="validating"&&(t="validating")}this._controlsStatus.value=t})}_watchBlurred(){o(()=>{let t=!1;const e=this._controls.value;for(const r of e)if(r.blurred.value){t=!0;break}this._blurred.value=t})}_watchDirty(){o(()=>{let t=!1;const e=this._controls.value;for(const r of e)if(r.dirty.value){t=!0;break}this._dirty.value=t})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class _ extends u{constructor(s,t,e){super(void 0,t,e,s),this._initValue=s,this._watchValid(),this._watchStatus()}setValue(s,t={}){this._valueRef.value=s,t.dirty&&this.markAsDirty(),t.blur&&this.markAsBlurred()}getValue(){return this._valueRef.value}_calculateInitValue(){return this._initValue}_forEachControls(s){}_find(s){}_watchValid(){n(this._valueRef,()=>{this.trigger==="change"&&this._validate()})}_watchStatus(){n(this._errors,s=>{this._status.value=s?"invalid":"valid"})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */class v extends u{constructor(s,t,e){super(s,t,e),this._watchValid(),this._watchValue(),this._watchStatus(),this._watchBlurred(),this._watchDirty()}setValue(s,t){const e=this._controls.value;Object.keys(s).forEach(r=>{const l=e[r];l&&l.setValue(s[r],t)})}getValue(s={}){const{skipDisabled:t}=s,e={};return this._forEachControls((r,l)=>{t&&r.disabled.value||(e[l]=r.getValue(s))}),e}_calculateInitValue(){return this.getValue()}_forEachControls(s){const t=this._controls.value;Object.keys(t).forEach(e=>s(t[e],e))}_find(s){const t=this._controls.value;return i(t,s)?t[s]:void 0}addControl(s,t){const e={...this._controls.value};i(e,s)||(t.setParent(this),e[s]=t,this._controls.value=e)}removeControl(s){const t={...this._controls.value};delete t[s],this._controls.value=t}setControl(s,t){t.setParent(this);const e={...this._controls.value};e[s]=t,this._controls.value=e}_watchValid(){n(this._valueRef,()=>{this.trigger==="change"&&this._validate()})}_watchValue(){o(()=>{this._valueRef.value=this.getValue()})}_watchStatus(){o(()=>{this._status.value=this._errors.value?"invalid":"valid"}),o(()=>{let s="valid";const t=this._controls.value;for(const e in t){if(!i(t,e))continue;const r=t[e].status.value;if(r==="invalid"){s="invalid";break}else r==="validating"&&(s="validating")}this._controlsStatus.value=s})}_watchBlurred(){o(()=>{let s=!1;const t=this._controls.value;for(const e in t)if(i(t,e)&&t[e].blurred.value){s=!0;break}this._blurred.value=s})}_watchDirty(){o(()=>{let s=!1;const t=this._controls.value;for(const e in t)if(i(t,e)&&t[e].dirty.value){s=!0;break}this._dirty.value=s})}}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */function k(a,s,t){const e=d(a);return new v(e,s,t)}function E(a,s,t){const e=a.map(r=>f(r));return new y(e,s,t)}function S(a,s,t){return new _(a,s,t)}function d(a){const s={};return Object.keys(a).forEach(t=>{s[t]=f(a[t])}),s}function f(a){if(b(a))return a;if(Array.isArray(a)){const[t,e,r]=a;return new _(t,e,r)}const s=d(a);return new v(s)}export{k as a,S as b,E as u};
