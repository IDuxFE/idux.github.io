import{I as B,a as q}from"./index-8113b55a.js";import{_ as T,I as K}from"./GlobalCodeBox-bee76b26.js";import{d as F,a3 as L,a4 as $,a5 as z,o as r,b as m,a6 as j,_ as A,a7 as M,L as D,l as C,w as k,h as s,f as o,e as n,a8 as H,j as W,i as I,a as G,z as b,A as w,F as v,p as l,B as Q,u as U,q as O,x as Z,C as E,D as x}from"./index-ab797f89.js";import{u as J,a as X}from"./useForms-48bc9f13.js";import"./__commonjsHelpers__-725317a4.js";const Y={class:"custom-form"},_=F({__name:"CustomForm",props:{control:{}},setup(e){const a=L();return $(z,a),(p,c)=>(r(),m("form",Y,[j(p.$slots,"default",{},void 0,!0)]))}});const R=A(_,[["__scopeId","data-v-681a27d6"]]),nn=["value","disabled"],sn=F({__name:"CustomInput",props:{control:{},disabled:{type:Boolean},value:{}},setup(e){const{accessor:a}=M(),p=()=>{a.markAsBlurred()},c=g=>{const{value:d}=g.target;a.setValue(d)};return(g,d)=>(r(),m("input",{class:"custom-input",value:D(a).value,disabled:D(a).disabled,onBlur:p,onInput:c},null,40,nn))}});const y=A(sn,[["__scopeId","data-v-c75b0607"]]),an=F({__name:"Basic",setup(e){const{required:a,min:p,max:c,email:g}=H,d=J([["remark0"],["remark1"],["remark2"]]),u=X({name:["tom",a],age:[18,[a,p(1),c(30)]],email:["",[g]],address:{city:["",a],street:["",a],zip:[""]},remarks:d});u.watchValue(f=>console.log("group value:",f)),u.watchStatus(f=>console.log("group status:",f));const i=u.get("name");i.watchStatus(f=>console.log("name value:",f)),i.watchStatus(f=>console.log("name status:",f));const V=()=>{u.valid.value?console.log("submit",u.getValue()):console.log("formGroup invalid: ",u)};return(f,t)=>{const h=W;return r(),C(R,{control:D(u)},{default:k(()=>[t[1]||(t[1]=s(" Name: ")),o(y,{control:"name"}),t[2]||(t[2]=s()),t[3]||(t[3]=n("br",null,null,-1)),t[4]||(t[4]=s(" Age: ")),o(y,{control:"age"}),t[5]||(t[5]=s()),t[6]||(t[6]=n("br",null,null,-1)),t[7]||(t[7]=s(" Email: ")),o(y,{control:"email"}),t[8]||(t[8]=s()),t[9]||(t[9]=n("br",null,null,-1)),t[10]||(t[10]=s(" City: ")),o(y,{control:["address","city"]}),t[11]||(t[11]=s()),t[12]||(t[12]=n("br",null,null,-1)),t[13]||(t[13]=s(" Street: ")),o(y,{control:["address","street"]}),t[14]||(t[14]=s()),t[15]||(t[15]=n("br",null,null,-1)),t[16]||(t[16]=s(" Zip: ")),o(y,{control:["address","zip"]}),t[17]||(t[17]=s()),t[18]||(t[18]=n("br",null,null,-1)),t[19]||(t[19]=s(" Remark-0: ")),o(y,{control:["remarks",0]}),t[20]||(t[20]=s()),t[21]||(t[21]=n("br",null,null,-1)),t[22]||(t[22]=s(" Remark-1:")),o(y,{control:["remarks",1]}),t[23]||(t[23]=s()),t[24]||(t[24]=n("br",null,null,-1)),t[25]||(t[25]=s(" Remark-2:")),o(y,{control:["remarks",2]}),t[26]||(t[26]=s()),t[27]||(t[27]=n("br",null,null,-1)),o(h,{mode:"primary",onClick:V},{default:k(()=>t[0]||(t[0]=[s("Submit")])),_:1})]),_:1},8,["control"])}}}),tn=F({name:"Basic",components:{"raw-demo":an},setup(){const{lang:e}=I(G);return{lang:e}}}),on={key:0},pn={key:1};function en(e,a,p,c,g,d){const u=b("raw-demo"),i=T;return r(),C(i,{packageName:"cdk",componentName:"forms",demoName:"Basic",code:"%3Ctemplate%3E%0A%20%20%3CCustomForm%20%3Acontrol%3D%22formGroup%22%3E%0A%20%20%20%20Name%3A%20%3CCustomInput%20control%3D%22name%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%20%20%20%20Age%3A%20%3CCustomInput%20control%3D%22age%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%20%20%20%20Email%3A%20%3CCustomInput%20control%3D%22email%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%20%20%20%20City%3A%20%3CCustomInput%20%3Acontrol%3D%22%5B'address'%2C%20'city'%5D%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%20%20%20%20Street%3A%20%3CCustomInput%20%3Acontrol%3D%22%5B'address'%2C%20'street'%5D%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%20%20%20%20Zip%3A%20%3CCustomInput%20%3Acontrol%3D%22%5B'address'%2C%20'zip'%5D%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%20%20%20%20Remark-0%3A%20%3CCustomInput%20%3Acontrol%3D%22%5B'remarks'%2C%200%5D%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%20%20%20%20Remark-1%3A%3CCustomInput%20%3Acontrol%3D%22%5B'remarks'%2C%201%5D%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%20%20%20%20Remark-2%3A%3CCustomInput%20%3Acontrol%3D%22%5B'remarks'%2C%202%5D%22%20%2F%3E%20%3Cbr%20%2F%3E%0A%0A%20%20%20%20%3CIxButton%20mode%3D%22primary%22%20%40click%3D%22onSubmit%22%3ESubmit%3C%2FIxButton%3E%0A%20%20%3C%2FCustomForm%3E%0A%3C%2Ftemplate%3E%0A%0A%3Cscript%20setup%20lang%3D%22ts%22%3E%0Aimport%20%7B%20Validators%2C%20useFormArray%2C%20useFormGroup%20%7D%20from%20'%40idux%2Fcdk%2Fforms'%0A%0Aimport%20CustomForm%20from%20'.%2FCustomForm.vue'%0Aimport%20CustomInput%20from%20'.%2FCustomInput.vue'%0A%0Aconst%20%7B%20required%2C%20min%2C%20max%2C%20email%20%7D%20%3D%20Validators%0A%0Aconst%20remarks%20%3D%20useFormArray(%5B%5B'remark0'%5D%2C%20%5B'remark1'%5D%2C%20%5B'remark2'%5D%5D)%0A%0Aconst%20formGroup%20%3D%20useFormGroup(%7B%0A%20%20name%3A%20%5B'tom'%2C%20required%5D%2C%0A%20%20age%3A%20%5B18%2C%20%5Brequired%2C%20min(1)%2C%20max(30)%5D%5D%2C%0A%20%20email%3A%20%5B''%2C%20%5Bemail%5D%5D%2C%0A%20%20address%3A%20%7B%0A%20%20%20%20city%3A%20%5B''%2C%20required%5D%2C%0A%20%20%20%20street%3A%20%5B''%2C%20required%5D%2C%0A%20%20%20%20zip%3A%20%5B''%5D%2C%0A%20%20%7D%2C%0A%20%20remarks%3A%20remarks%2C%0A%7D)%0A%0AformGroup.watchValue(value%20%3D%3E%20console.log('group%20value%3A'%2C%20value))%0AformGroup.watchStatus(stats%20%3D%3E%20console.log('group%20status%3A'%2C%20stats))%0A%0Aconst%20nameControl%20%3D%20formGroup.get('name')%0AnameControl.watchStatus(value%20%3D%3E%20console.log('name%20value%3A'%2C%20value))%0AnameControl.watchStatus(stats%20%3D%3E%20console.log('name%20status%3A'%2C%20stats))%0A%0Aconst%20onSubmit%20%3D%20()%20%3D%3E%20%7B%0A%20%20if%20(formGroup.valid.value)%20%7B%0A%20%20%20%20console.log('submit'%2C%20formGroup.getValue())%0A%20%20%7D%20else%20%7B%0A%20%20%20%20console.log('formGroup%20invalid%3A%20'%2C%20formGroup)%0A%20%20%7D%0A%7D%0A%3C%2Fscript%3E%0A",title:e.lang==="zh"?"基本使用":"Basic usage"},{description:k(()=>[e.lang==="zh"?(r(),m("p",on,"最简单的用法。")):w("",!0),e.lang==="en"?(r(),m("p",pn,"The simplest usage.")):w("",!0)]),rawCode:k(()=>[o(u)]),highlightCode:k(()=>a[0]||(a[0]=[n("div",null,[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomForm")]),s(),n("span",{class:"token attr-name"},":control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("formGroup"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    Name: `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},"control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("name"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    Age: `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},"control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("age"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    Email: `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},"control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("email"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    City: `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},":control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("['address', 'city']"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    Street: `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},":control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("['address', 'street']"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    Zip: `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},":control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("['address', 'zip']"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    Remark-0: `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},":control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("['remarks', 0]"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    Remark-1:`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},":control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("['remarks', 1]"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
    Remark-2:`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("CustomInput")]),s(),n("span",{class:"token attr-name"},":control"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("['remarks', 2]"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("br")]),s(),n("span",{class:"token punctuation"},"/>")]),s(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("IxButton")]),s(),n("span",{class:"token attr-name"},"mode"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("primary"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"@click"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onSubmit"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("Submit"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("IxButton")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("CustomForm")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"setup"),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("ts"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" Validators"),n("span",{class:"token punctuation"},","),s(" useFormArray"),n("span",{class:"token punctuation"},","),s(" useFormGroup "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@idux/cdk/forms'"),s(`

`),n("span",{class:"token keyword"},"import"),s(" CustomForm "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./CustomForm.vue'"),s(`
`),n("span",{class:"token keyword"},"import"),s(" CustomInput "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./CustomInput.vue'"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" required"),n("span",{class:"token punctuation"},","),s(" min"),n("span",{class:"token punctuation"},","),s(" max"),n("span",{class:"token punctuation"},","),s(" email "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(` Validators

`),n("span",{class:"token keyword"},"const"),s(" remarks "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"useFormArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'remark0'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'remark1'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'remark2'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"const"),s(" formGroup "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"useFormGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'tom'"),n("span",{class:"token punctuation"},","),s(" required"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"age"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),s("required"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"email"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),s("email"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"address"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token literal-property property"},"city"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},","),s(" required"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token literal-property property"},"street"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},","),s(" required"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token literal-property property"},"zip"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"remarks"),n("span",{class:"token operator"},":"),s(" remarks"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

formGroup`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"watchValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),s(),n("span",{class:"token operator"},"=>"),s(" console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'group value:'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
formGroup`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"watchStatus"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"stats"),s(),n("span",{class:"token operator"},"=>"),s(" console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'group status:'"),n("span",{class:"token punctuation"},","),s(" stats"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"const"),s(" nameControl "),n("span",{class:"token operator"},"="),s(" formGroup"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'name'"),n("span",{class:"token punctuation"},")"),s(`
nameControl`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"watchStatus"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"value"),s(),n("span",{class:"token operator"},"=>"),s(" console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'name value:'"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
nameControl`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"watchStatus"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"stats"),s(),n("span",{class:"token operator"},"=>"),s(" console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'name status:'"),n("span",{class:"token punctuation"},","),s(" stats"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"onSubmit"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("formGroup"),n("span",{class:"token punctuation"},"."),s("valid"),n("span",{class:"token punctuation"},"."),s("value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'submit'"),n("span",{class:"token punctuation"},","),s(" formGroup"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'formGroup invalid: '"),n("span",{class:"token punctuation"},","),s(" formGroup"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`
`)])])],-1)])),_:1},8,["title"])}const cn=A(tn,[["render",en]]),ln=F({name:"CustomInput",components:{"raw-demo":y},setup(){const{lang:e}=I(G);return{lang:e}}});function rn(e,a,p,c,g,d){const u=b("raw-demo"),i=T;return r(),C(i,{packageName:"cdk",componentName:"forms",demoName:"CustomInput",code:"%3Ctemplate%3E%0A%20%20%3Cinput%20class%3D%22custom-input%22%20%3Avalue%3D%22accessor.value%22%20%3Adisabled%3D%22accessor.disabled%22%20%40blur%3D%22onBlur%22%20%40input%3D%22onInput%22%20%2F%3E%0A%3C%2Ftemplate%3E%0A%0A%3Cscript%20setup%20lang%3D%22ts%22%3E%0Aimport%20%7B%20useAccessorAndControl%20%7D%20from%20'%40idux%2Fcdk%2Fforms'%0A%0AdefineProps%3C%7B%0A%20%20control%3F%3A%20string%20%7C%20number%20%7C%20(string%20%7C%20number)%5B%5D%20%7C%20object%0A%20%20disabled%3F%3A%20boolean%0A%20%20value%3F%3A%20string%0A%7D%3E()%0A%0A%2F%2F%20useAccessorAndControl%20%E5%86%85%E9%83%A8%E5%AF%B9%20props%20%E4%B8%AD%E7%9A%84%20control%2C%20disabled%2C%20value%20%E8%BF%9B%E8%A1%8C%E4%BA%86%E5%A4%84%E7%90%86%0Aconst%20%7B%20accessor%20%7D%20%3D%20useAccessorAndControl()%0A%0A%2F%2F%20%E8%A1%A8%E5%8D%95%20blur%20%E7%8A%B6%E6%80%81%0Aconst%20onBlur%20%3D%20()%20%3D%3E%20%7B%0A%20%20accessor.markAsBlurred()%0A%7D%0A%0A%2F%2F%20%E8%A1%A8%E5%8D%95%E5%80%BC%E5%8F%91%E7%94%9F%E5%8F%98%E6%9B%B4%E5%90%8E%E7%9A%84%E5%9B%9E%E8%B0%83%0Aconst%20onInput%20%3D%20(evt%3A%20Event)%20%3D%3E%20%7B%0A%20%20const%20%7B%20value%20%7D%20%3D%20evt.target%20as%20HTMLInputElement%0A%20%20accessor.setValue(value)%0A%7D%0A%3C%2Fscript%3E%0A%0A%3Cstyle%20scoped%20lang%3D%22less%22%3E%0A.custom-input%20%7B%0A%20%20outline%3A%20none%3B%0A%20%20border%3A%201px%20solid%20%23ccc%3B%0A%20%20margin-bottom%3A%2016px%3B%0A%7D%0A%3C%2Fstyle%3E%0A",title:e.lang==="zh"?"自定义输入控件":"Custom input control"},{description:k(()=>[e.lang==="zh"?(r(),m(v,{key:0},[a[0]||(a[0]=n("p",null,[s("自定义一个支持 "),n("code",null,"AbstractControl"),s(" 的输入控件。")],-1)),a[1]||(a[1]=n("p",null,[s("更多实现细节，请参考："),n("a",{href:"https://github.com/IDuxFE/idux/blob/main/packages/components/input/src/Input.tsx",target:"_blank",rel:"noopener"},"Input"),s(" 或其他输入型组件。")],-1))],64)):w("",!0),e.lang==="en"?(r(),m(v,{key:1},[a[2]||(a[2]=n("p",null,[s("Customize with an input control that supports "),n("code",null,"AbstractControl"),s(".")],-1)),a[3]||(a[3]=n("p",null,[s("For more implementation details, see: "),n("a",{href:"https://github.com/IDuxFE/idux/blob/main/packages/components/form/src/Input.tsx",target:"_blank",rel:"noopener"},"Input"),s(" or other input components.")],-1))],64)):w("",!0)]),rawCode:k(()=>[o(u)]),highlightCode:k(()=>a[4]||(a[4]=[n("div",null,[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("custom-input"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},":value"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("accessor.value"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},":disabled"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("accessor.disabled"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"@blur"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onBlur"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"@input"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("onInput"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token punctuation"},"/>")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"setup"),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("ts"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" useAccessorAndControl "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@idux/cdk/forms'"),s(`

defineProps`),n("span",{class:"token operator"},"<"),n("span",{class:"token punctuation"},"{"),s(`
  control`),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(" string "),n("span",{class:"token operator"},"|"),s(" number "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token punctuation"},"("),s("string "),n("span",{class:"token operator"},"|"),s(" number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"|"),s(` object
  disabled`),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(` boolean
  value`),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(` string
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// useAccessorAndControl 内部对 props 中的 control, disabled, value 进行了处理"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" accessor "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"useAccessorAndControl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 表单 blur 状态"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"onBlur"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  accessor`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"markAsBlurred"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 表单值发生变更后的回调"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"onInput"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token literal-property property"},"evt"),n("span",{class:"token operator"},":"),s(" Event")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" value "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" evt"),n("span",{class:"token punctuation"},"."),s("target "),n("span",{class:"token keyword"},"as"),s(` HTMLInputElement
  accessor`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setValue"),n("span",{class:"token punctuation"},"("),s("value"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("style")]),s(),n("span",{class:"token attr-name"},"scoped"),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("less"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[s(`
`),n("span",{class:"token selector"},".custom-input"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"outline"),n("span",{class:"token punctuation"},":"),s(" none"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s(" 1px solid #ccc"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token property"},"margin-bottom"),n("span",{class:"token punctuation"},":"),s(" 16px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("style")]),n("span",{class:"token punctuation"},">")]),s(`
`)])])],-1)])),_:1},8,["title"])}const un=A(ln,[["render",rn]]),kn=F({name:"CustomForm",components:{"raw-demo":R},setup(){const{lang:e}=I(G);return{lang:e}}});function dn(e,a,p,c,g,d){const u=b("raw-demo"),i=T;return r(),C(i,{packageName:"cdk",componentName:"forms",demoName:"CustomForm",code:"%3Ctemplate%3E%0A%20%20%3Cform%20class%3D%22custom-form%22%3E%3Cslot%20%2F%3E%3C%2Fform%3E%0A%3C%2Ftemplate%3E%0A%0A%3Cscript%20setup%20lang%3D%22ts%22%3E%0Aimport%20%7B%20provide%20%7D%20from%20'vue'%0A%0Aimport%20%7B%20FORMS_CONTROL_TOKEN%2C%20useControl%20%7D%20from%20'%40idux%2Fcdk%2Fforms'%0A%0AdefineProps%3C%7B%0A%20%20control%3F%3A%20string%20%7C%20number%20%7C%20(string%20%7C%20number)%5B%5D%20%7C%20object%0A%7D%3E()%0A%0A%2F%2F%20%E9%80%9A%E8%BF%87%20props.control%20%E6%8B%BF%E5%88%B0%E7%9C%9F%E6%AD%A3%E7%9A%84%20control(AbstractControl)%0Aconst%20controlRef%20%3D%20useControl()%0A%0A%2F%2F%20%E6%B3%A8%E5%85%A5%20control%2C%20%E4%BB%A5%E4%BE%BF%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E8%BF%87%20key%20%E8%8E%B7%E5%8F%96%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AD%90%20control%0Aprovide(FORMS_CONTROL_TOKEN%2C%20controlRef)%0A%3C%2Fscript%3E%0A%0A%3Cstyle%20scoped%20lang%3D%22less%22%3E%0A.custom-form%20%7B%0A%20%20border%3A%201px%20solid%20%23ccc%3B%0A%20%20padding%3A%2016px%3B%0A%7D%0A%3C%2Fstyle%3E%0A",title:e.lang==="zh"?"自定义表单":"Custom form"},{description:k(()=>[e.lang==="zh"?(r(),m(v,{key:0},[a[0]||(a[0]=n("p",null,[s("自定以一个支持 "),n("code",null,"AbstractControl"),s(" 的表单组件。")],-1)),a[1]||(a[1]=n("p",null,[s("更多实现细节，请参考："),n("a",{href:"https://github.com/IDuxFE/idux/blob/main/packages/components/form/src/Form.tsx",target:"_blank",rel:"noopener"},"Form"),s(" 与 "),n("a",{href:"https://github.com/IDuxFE/idux/blob/main/packages/components/form/src/FormItem.tsx",target:"_blank",rel:"noopener"},"FormItem"),s("。")],-1))],64)):w("",!0),e.lang==="en"?(r(),m(v,{key:1},[a[2]||(a[2]=n("p",null,[s("Customize with a form component that supports "),n("code",null,"AbstractControl"),s(".")],-1)),a[3]||(a[3]=n("p",null,[s("For more implementation details, see: "),n("a",{href:"https://github.com/IDuxFE/idux/blob/main/packages/components/form/src/Form.tsx",target:"_blank",rel:"noopener"},"Form"),s(" and "),n("a",{href:"https://github.com/IDuxFE/idux/blob/main/packages/components/form/src/FormItem.tsx",target:"_blank",rel:"noopener"},"FormItem"),s(".")],-1))],64)):w("",!0)]),rawCode:k(()=>[o(u)]),highlightCode:k(()=>a[4]||(a[4]=[n("div",null,[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("form")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("custom-form"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("slot")]),s(),n("span",{class:"token punctuation"},"/>")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("form")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"setup"),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("ts"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" provide "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'vue'"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token constant"},"FORMS_CONTROL_TOKEN"),n("span",{class:"token punctuation"},","),s(" useControl "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'@idux/cdk/forms'"),s(`

defineProps`),n("span",{class:"token operator"},"<"),n("span",{class:"token punctuation"},"{"),s(`
  control`),n("span",{class:"token operator"},"?"),n("span",{class:"token operator"},":"),s(" string "),n("span",{class:"token operator"},"|"),s(" number "),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token punctuation"},"("),s("string "),n("span",{class:"token operator"},"|"),s(" number"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"|"),s(` object
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 通过 props.control 拿到真正的 control(AbstractControl)"),s(`
`),n("span",{class:"token keyword"},"const"),s(" controlRef "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"useControl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 注入 control, 以便子组件通过 key 获取对应的子 control"),s(`
`),n("span",{class:"token function"},"provide"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"FORMS_CONTROL_TOKEN"),n("span",{class:"token punctuation"},","),s(" controlRef"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("style")]),s(),n("span",{class:"token attr-name"},"scoped"),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("less"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[s(`
`),n("span",{class:"token selector"},".custom-form"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s(" 1px solid #ccc"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token property"},"padding"),n("span",{class:"token punctuation"},":"),s(" 16px"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("style")]),n("span",{class:"token punctuation"},">")]),s(`
`)])])],-1)])),_:1},8,["title"])}const mn=A(kn,[["render",dn]]),gn={},fn={class:"markdown site-doc-api"};function yn(e,a){const p=q,c=B;return r(),m("section",fn,[o(c,{class:"site-anchor",affix:"",offset:16},{default:k(()=>[o(p,{href:"#useFormGroup",title:"useFormGroup"}),o(p,{href:"#useFormArray",title:"useFormArray"}),o(p,{href:"#useFormControl",title:"useFormControl"}),o(p,{href:"#ValidatorOptions",title:"ValidatorOptions"}),o(p,{href:"#Validators",title:"Validators"}),o(p,{href:"#useAccessorAndControl",title:"useAccessorAndControl"}),o(p,{href:"#AbstractControl",title:"AbstractControl"}),o(p,{href:"#FormControl",title:"FormControl"}),o(p,{href:"#FormGroup",title:"FormGroup"}),o(p,{href:"#FormArray",title:"FormArray"})]),_:1}),a[0]||(a[0]=n("h3",{id:"useFormGroup"},[n("span",null,"useFormGroup"),n("a",{onclick:"window.location.hash = 'useFormGroup'",class:"anchor"},"#")],-1)),a[1]||(a[1]=l(`<blockquote><p>构建一个的 <code>FormGroup</code> 实例。</p></blockquote><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFormGroup</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>config<span class="token operator">:</span> GroupConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> validatorOptions<span class="token operator">?</span><span class="token operator">:</span> ValidatorOptions<span class="token punctuation">)</span><span class="token operator">:</span> FormGroup<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFormGroup</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  config<span class="token operator">:</span> GroupConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  validators<span class="token operator">?</span><span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  asyncValidators<span class="token operator">?</span><span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> FormGroup<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></code></pre><table><thead><tr><th>名称</th><th>说明</th><th>类型</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>config</code></td><td>控件组配置项</td><td><code>GroupConfig&lt;T&gt;</code></td><td>-</td><td>每个子控件的 <code>key</code> 就是配置项的 <code>key</code></td></tr><tr><td><code>validatorOptions</code></td><td>控件组验证配置项</td><td><code>ValidatorOptions</code></td><td>-</td><td>参见<a href="#ValidatorOptions">ValidatorOptions</a></td></tr><tr><td><code>validators</code></td><td>一个同步验证器函数或数组</td><td><code>ValidatorFn | ValidatorFn[]</code></td><td>-</td><td>只针对当前控件组的值进行验证</td></tr><tr><td><code>asyncValidators</code></td><td>一个异步验证器函数或数组</td><td><code>AsyncValidatorFn | AsyncValidatorFn[]</code></td><td>-</td><td>只针对当前控件组的值进行验证</td></tr></tbody></table><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name">ControlConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>
  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span>
  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> ValidatorOptions<span class="token punctuation">]</span>
  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name">GroupConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> ControlConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">|</span> GroupConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">|</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span></code></pre>`,4)),a[2]||(a[2]=n("h3",{id:"useFormArray"},[n("span",null,"useFormArray"),n("a",{onclick:"window.location.hash = 'useFormArray'",class:"anchor"},"#")],-1)),a[3]||(a[3]=l(`<blockquote><p>构建一个的 <code>FormArray</code> 实例。</p></blockquote><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFormArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>config<span class="token operator">:</span> ArrayConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> validatorOptions<span class="token operator">?</span><span class="token operator">:</span> ValidatorOptions<span class="token punctuation">)</span><span class="token operator">:</span> FormArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFormArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  config<span class="token operator">:</span> ArrayConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  validators<span class="token operator">?</span><span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  asyncValidators<span class="token operator">?</span><span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> FormArray<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></code></pre><table><thead><tr><th>名称</th><th>说明</th><th>类型</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>config</code></td><td>控件数组配置项</td><td><code>ArrayConfig&lt;T&gt;</code></td><td>-</td><td>每个子控件的 <code>key</code> 就是配置项的 <code>index</code></td></tr><tr><td><code>validatorOptions</code></td><td>控件数组验证配置项</td><td><code>ValidatorOptions</code></td><td>-</td><td>参见<a href="#ValidatorOptions">ValidatorOptions</a></td></tr><tr><td><code>validators</code></td><td>一个同步验证器函数或数组</td><td><code>ValidatorFn | ValidatorFn[]</code></td><td>-</td><td>只针对当前控件数组的值进行验证</td></tr><tr><td><code>asyncValidators</code></td><td>一个异步验证器函数或数组</td><td><code>AsyncValidatorFn | AsyncValidatorFn[]</code></td><td>-</td><td>只针对当前控件数组的值进行验证</td></tr></tbody></table><pre class="language-ts"><code><span class="token keyword">type</span> <span class="token class-name">ArrayConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>ControlConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> GroupConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span></code></pre>`,4)),a[4]||(a[4]=n("h3",{id:"useFormControl"},[n("span",null,"useFormControl"),n("a",{onclick:"window.location.hash = 'useFormControl'",class:"anchor"},"#")],-1)),a[5]||(a[5]=l(`<blockquote><p>构建一个的 <code>FormControl</code> 实例。</p></blockquote><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFormControl</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> validatorOptions<span class="token operator">?</span><span class="token operator">:</span> ValidatorOptions<span class="token punctuation">)</span><span class="token operator">:</span> FormControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFormControl</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  initValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
  validators<span class="token operator">?</span><span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  asyncValidators<span class="token operator">?</span><span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> FormControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></code></pre><table><thead><tr><th>名称</th><th>说明</th><th>类型</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>initValue</code></td><td>控件初始值</td><td><code>any</code></td><td>-</td><td>-</td></tr><tr><td><code>validatorOptions</code></td><td>控件验证配置项</td><td><code>ValidatorOptions</code></td><td>-</td><td>参见<a href="#ValidatorOptions">ValidatorOptions</a></td></tr><tr><td><code>validators</code></td><td>一个同步验证器函数或数组</td><td><code>ValidatorFn | ValidatorFn[]</code></td><td>-</td><td>-</td></tr><tr><td><code>asyncValidators</code></td><td>一个异步验证器函数或数组</td><td><code>AsyncValidatorFn | AsyncValidatorFn[]</code></td><td>-</td><td>-</td></tr></tbody></table>`,3)),a[6]||(a[6]=n("h3",{id:"ValidatorOptions"},[n("span",null,"ValidatorOptions"),n("a",{onclick:"window.location.hash = 'ValidatorOptions'",class:"anchor"},"#")],-1)),a[7]||(a[7]=l("<blockquote><p>如果需要默认禁用当前控件数组，或者指定验证触发时机时，使用对象形式的配置项。</p></blockquote><table><thead><tr><th>名称</th><th>说明</th><th>类型</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>disabled</code></td><td>默认禁用当前控件</td><td><code>boolean | (control: AbstractControl, initializing: boolean) =&gt; boolean</code></td><td>-</td><td><code>initializing</code> 为 <code>true</code> 时，表示处于初始化中，此时 <code>control</code> 的部分属性还不能访问。</td></tr><tr><td><code>name</code></td><td>控件的名称</td><td><code>string</code></td><td>-</td><td>通常用于自定义提示信息</td></tr><tr><td><code>example</code></td><td>控件的示例</td><td><code>string</code></td><td>-</td><td>通常用于自定义提示信息</td></tr><tr><td><code>trigger</code></td><td>验证器触发的时机</td><td><code>&#39;change&#39; | &#39;blur&#39; | &#39;submit&#39; | &#39;interactions&#39;</code></td><td><code>change</code></td><td>-</td></tr><tr><td><code>validators</code></td><td>一个同步验证器函数或数组</td><td><code>ValidatorFn | ValidatorFn[]</code></td><td>-</td><td>-</td></tr><tr><td><code>asyncValidators</code></td><td>一个异步验证器函数或数组</td><td><code>AsyncValidatorFn | AsyncValidatorFn[]</code></td><td>-</td><td>-</td></tr></tbody></table>",2)),a[8]||(a[8]=n("h3",{id:"Validators"},[n("span",null,"Validators"),n("a",{onclick:"window.location.hash = 'Validators'",class:"anchor"},"#")],-1)),a[9]||(a[9]=l('<blockquote><p>验证函数验证成功返回 <code>null</code>, 验证失败返回带有验证函数名称的 <code>object</code></p></blockquote><table><thead><tr><th>名称</th><th>说明</th><th>参数类型</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><code>required</code></td><td>验证表单控件具有非空值</td><td>-</td><td>-</td><td>验证失败返回 <code>{ required: { message: &#39;&#39; } }</code></td></tr><tr><td><code>requiredTrue</code></td><td>验证表单控件的值为 <code>true</code></td><td>-</td><td>-</td><td>验证失败返回 <code>{ requiredTrue: { message: &#39;&#39;, actual: value } }</code></td></tr><tr><td><code>email</code></td><td>验证表单控件的值是否为 <code>email</code></td><td>-</td><td>-</td><td>验证失败返回 <code>{ email: { message: &#39;&#39;, actual: value } }</code></td></tr><tr><td><code>min()</code></td><td>验证表单控件的值大于或等于指定的数字</td><td><code>number</code></td><td>-</td><td>验证失败返回 <code>{ min: { message: &#39;&#39;, min, actual: value } }</code></td></tr><tr><td><code>max()</code></td><td>验证表单控件的值小于或等于指定的数字</td><td><code>number</code></td><td>-</td><td>验证失败返回 <code>{ max: { message: &#39;&#39;, min, actual: value } }</code></td></tr><tr><td><code>range()</code></td><td>验证表单控件的值的范围</td><td><code>number, number</code></td><td>-</td><td>验证失败返回 <code>{ range: { message: &#39;&#39;, min, max, actual: value } }</code></td></tr><tr><td><code>minLength()</code></td><td>验证表单控件的值的长度大于或等于指定的数字</td><td><code>number</code></td><td>-</td><td>验证失败返回 <code>{ minLength: { message: &#39;&#39;, minLength, actual: value.length, isArray } }</code></td></tr><tr><td><code>maxLength()</code></td><td>验证表单控件的值的长度小于或等于指定的数字</td><td><code>number</code></td><td>-</td><td>验证失败返回 <code>{ maxLength: { message: &#39;&#39;, maxLength, actual: value.length, isArray } }</code></td></tr><tr><td><code>rangeLength()</code></td><td>验证表单控件的值的长度范围</td><td><code>number, number</code></td><td>-</td><td>验证失败返回 <code>{ rangeLength: { message: &#39;&#39;, minLength, maxLength, actual: value.length, isArray } }</code></td></tr><tr><td><code>pattern()</code></td><td>验证表单控件的值匹配一个正则表达式</td><td><code>string | RegExp</code></td><td>-</td><td>验证失败返回 <code>{ pattern: { message: &#39;&#39;, pattern, actual: value } }</code></td></tr><tr><td><code>setMessages()</code></td><td>设置验证失败的提示信息</td><td><code>(messages: ValidateMessages, locale?: string)</code></td><td>-</td><td>每次设置的 <code>messages</code> 会跟之前的进行合并, 默认的提示信息为 <code>zhCNMessages</code>。 <code>locale</code> 是可选的参数, 传入后会将 <code>messages</code> 转换成 i18n 的格式。</td></tr></tbody></table><p>更多默认的提示信息，参见 <a href="https://github.com/IDuxFE/idux/tree/main/packages/cdk/forms/src/messages" target="_blank" rel="noopener">messages</a></p>',3)),a[10]||(a[10]=n("h3",{id:"useAccessorAndControl"},[n("span",null,"useAccessorAndControl"),n("a",{onclick:"window.location.hash = 'useAccessorAndControl'",class:"anchor"},"#")],-1)),a[11]||(a[11]=l(`<p>用于处理表单控件 <code>props</code> 的 <code>control</code> 和 <code>value</code>, <code>disabled</code> 的优先级关系，<code>control</code> 存在时， <code>value</code> 和 <code>disabled</code> 失效。</p><p>创建一个响应式对象 <code>FormAccessor</code>，它接管了组件 <code>value</code> 和 <code>disabled</code> 控制，用法也同 <code>props</code> 一致。</p><pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useAccessorAndControl</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> FormAccessorOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    accessor<span class="token operator">:</span> FormAccessor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    control<span class="token operator">:</span> ShallowRef<span class="token operator">&lt;</span>AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useAccessor</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>control<span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span>AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> valueKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> disabledKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> FormAccessor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useControl</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>controlKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> ShallowRef<span class="token operator">&lt;</span>AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">FormAccessorOptions</span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * props 中 control 的 key
   *
   * @default &#39;control&#39;
   */</span>
  controlKey<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">/**
   * props 中 value 的 key
   *
   * @default &#39;value&#39;
   */</span>
  valueKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">/**
   * props 中 disabled 的 key
   *
   * @default &#39;disabled&#39;
   */</span>
  disabledKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">FormAccessor<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/**
   * 控件的值
   */</span>
  value<span class="token operator">:</span> <span class="token constant">T</span>
  <span class="token comment">/**
   * 禁用状态
   */</span>
  disabled<span class="token operator">:</span> <span class="token builtin">boolean</span>
  <span class="token comment">/**
   * 将控件设置为 blurred 状态
   */</span>
  <span class="token function-variable function">markAsBlurred</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
 <span class="token comment">/**
   * 设置控件的值
   *
   * @param value 新的值
   * @param options
   * * \`dirty\`: 是否让控件变成 \`dirty\` 状态, 默认值为 \`true\`.
   * * \`blur\`: 是否让控件变成 \`blurred\` 状态, 默认值为 \`false\`.
   */</span>
  <span class="token function-variable function">setValue</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">{</span> dirty<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> blur<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span></code></pre><p>特别需要注意的是: <code>FormAccessor</code> 中的 <code>setValue</code> 的第二个参数中的 <code>dirty</code> 默认为 <code>true</code>, 与 <code>AbstractControl</code> 的 <code>setValue</code> 不一致。</p>`,4)),a[12]||(a[12]=n("h3",{id:"AbstractControl"},[n("span",null,"AbstractControl"),n("a",{onclick:"window.location.hash = 'AbstractControl'",class:"anchor"},"#")],-1)),a[13]||(a[13]=l(`<pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * control 的唯一 id
     */</span>
    <span class="token keyword">readonly</span> uid<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 子控件的集合
     */</span>
    <span class="token keyword">readonly</span> controls<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 控件的 ref 值
     */</span>
    <span class="token keyword">readonly</span> valueRef<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 控件的验证状态，有三种可能的验证状态值:
     * * **valid**: 此控件已通过所有验证
     * * **invalid**: 此控件至少有一个验证失败
     * * **validating**: 此控件正在执行验证
     */</span>
    <span class="token keyword">readonly</span> status<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span>ValidateStatus<span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 包含验证失败所产生的任何错误的对象，如果没有错误则为 \`undefined\`
     */</span>
    <span class="token keyword">readonly</span> errors<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span>ValidateErrors <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件是否验证通过
     */</span>
    <span class="token keyword">readonly</span> valid<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件是否验证失败
     */</span>
    <span class="token keyword">readonly</span> invalid<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件是否正在验证中
     */</span>
    <span class="token keyword">readonly</span> validating<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件是否被禁用
     */</span>
    <span class="token keyword">readonly</span> disabled<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件是否已经触发 blur 事件
     */</span>
    <span class="token keyword">readonly</span> blurred<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件是否尚未触发 blur 事件
     */</span>
    <span class="token keyword">readonly</span> unblurred<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 如果用户在 UI 中更改了控件的值，则该控件是 \`dirty\`
     */</span>
    <span class="token keyword">readonly</span> dirty<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 如果用户在 UI 中尚未更改控件的值，则该控件是 \`pristine\`
     */</span>
    <span class="token keyword">readonly</span> pristine<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 如果控件被执行过校验，则 \`validated\` 为 \`true\`
     */</span>
    <span class="token keyword">readonly</span> validated<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件的父级控制器, 如果不存在则为 \`undefined\`
     */</span>
    <span class="token keyword">get</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AbstractControl <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件的顶层控制器,, 如果不存上层控制器在则为自身
     */</span>
    <span class="token keyword">get</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件触发验证的时机
     * 可选值: \`&#39;change&#39;\` | \`&#39;blur&#39;\` | \`&#39;submit&#39;\`
     * 默认值: \`&#39;change&#39;\`
     */</span>
    <span class="token keyword">get</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">&#39;change&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;blur&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;submit&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;interactions&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件的名称，通常用于验证提示信息
     */</span>
    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 此控件的示例，通常用于验证提示信息
     */</span>
    example<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>
      controls<span class="token operator">?</span><span class="token operator">:</span> GroupControls<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> AbstractControl<span class="token operator">&lt;</span>ArrayElement<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
      validatorOrOptions<span class="token operator">?</span><span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> ValidatorOptions<span class="token punctuation">,</span> 
      asyncValidator<span class="token operator">?</span><span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> initValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 设置控件的新值。
     *
     * @param value 新值
     * @param options
     * * \`dirty\`: 是否将其标记为 \`dirty\`, 默认为 \`false\`
     * * \`blur\`: 是否将其标记为 \`blurred\`, 默认为 \`false\`
     */</span>
    <span class="token keyword">abstract</span> <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Partial<span class="token operator">&lt;</span>ArrayElement<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        dirty<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
        blur<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 控件的聚合值。
     *
     * @param options
     * * \`skipDisabled\`: 是否忽略禁用控件的值，默认为 \`false\`
     */</span>
    <span class="token keyword">abstract</span> <span class="token function">getValue</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        skipDisabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 重置控件，将其标记为 \`unblurred\` 和 \`pristine\`, 并将值设置为初始化的值
     */</span>
    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 手动运行验证
     */</span>
    <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ValidateErrors <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 禁用此控制器
     */</span>
    <span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 启用此控制器
     */</span>
    <span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 将控件标记为 \`blurred\`
     */</span>
    <span class="token function">markAsBlurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 将控件标记为 \`unblurred\`.
     */</span>
    <span class="token function">markAsUnblurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 将控件标记为  \`dirty\`.
     */</span>
    <span class="token function">markAsDirty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 将控件标记为  \`pristine\`.
     */</span>
    <span class="token function">markAsPristine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 为控件设置新的同步验证器，它将覆盖现有的同步验证器
     * 
     * 如果你想清除所有同步验证器，你可以传入 \`undefined\`
     */</span>
    <span class="token function">setValidators</span><span class="token punctuation">(</span>newValidators<span class="token operator">?</span><span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 为控件设置新的异步验证器，它将覆盖现有的异步验证器
     * 
     * 如果你想清除所有异步验证器，你可以传入 \`undefined\`
     */</span>
    <span class="token function">setAsyncValidators</span><span class="token punctuation">(</span>newAsyncValidators<span class="token operator">?</span><span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 向此控件添加一个或多个同步验证器，但不影响其他验证器
     *
     * 当您在运行时添加或删除验证器时，您必须调用 \`validate()\` 以使新的验证生效
     */</span>
    <span class="token function">addValidators</span><span class="token punctuation">(</span>validators<span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 向此控件添加一个或多个异步验证器，但不影响其他验证器
     *
     * 当您在运行时添加或删除验证器时，您必须调用 \`validate()\` 以使新的验证生效
     */</span>
    <span class="token function">addAsyncValidators</span><span class="token punctuation">(</span>validators<span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 从此控件中删除同步验证器，但不影响其他验证器
     * 通过函数引用比较验证器, 必须传递对完全相同的函数引用
     * 如果没有找到提供的验证器，它将被忽略
     *
     * 当您在运行时添加或删除验证器时，您必须调用 \`validate()\` 以使新的验证生效
     */</span>
    <span class="token function">removeValidators</span><span class="token punctuation">(</span>validators<span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 从此控件中删除异步验证器，但不影响其他验证器
     * 通过函数引用比较验证器, 必须传递对完全相同的函数引用
     * 如果没有找到提供的验证器，它将被忽略
     *
     * 当您在运行时添加或删除验证器时，您必须调用 \`validate()\` 以使新的验证生效
     */</span>
    <span class="token function">removeAsyncValidators</span><span class="token punctuation">(</span>validators<span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 清空同步验证器
     *
     * 当您在运行时添加或删除验证器时，您必须调用 \`validate()\` 以使新的验证生效
     *
     */</span>
    <span class="token function">clearValidators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 清空异步验证器
     *
     * 当您在运行时添加或删除验证器时，您必须调用 \`validate()\` 以使新的验证生效
     *
     */</span>
    <span class="token function">clearAsyncValidators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 检查此控件上是否有同步验证器函数
     * 所提供的验证器必须是对所提供的完全相同函数的引用
     *
     */</span>
    <span class="token function">hasValidator</span><span class="token punctuation">(</span>validator<span class="token operator">:</span> ValidatorFn<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 检查此控件上是否有异步验证器函数
     * 所提供的验证器必须是对所提供的完全相同函数的引用
     *
     */</span>
    <span class="token function">hasAsyncValidator</span><span class="token punctuation">(</span>validator<span class="token operator">:</span> AsyncValidatorFn<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 获取给定控件名称或路径的子控件
     *
     * @param path 子控件的路径，可以是字符串或者数字，也可以是一个数组
     */</span>
    <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">TK</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> ControlPathType<span class="token punctuation">)</span><span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">TK</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 手动设置表单控件上的错误
     */</span>
    <span class="token function">setErrors</span><span class="token punctuation">(</span>errors<span class="token operator">?</span><span class="token operator">:</span> ValidateErrors<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 获取给定路径的控件的错误数据
     *
     * @param errorCode 要检查的错误代码，例如：\`required\`, \`email\`
     * @param path 子控件的路径, 不传则为当前控件
     */</span>
    <span class="token function">getError</span><span class="token punctuation">(</span>errorCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> path<span class="token operator">?</span><span class="token operator">:</span> ControlPathType<span class="token punctuation">)</span><span class="token operator">:</span> ValidateError <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 给定路径的控件是否存在错误
     *
     * @param errorCode 要检查的错误代码，例如：\`required\`, \`email\`
     * @param path 子控件的路径, 不传则为当前控件
     */</span>
    <span class="token function">hasError</span><span class="token punctuation">(</span>errorCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> path<span class="token operator">?</span><span class="token operator">:</span> ControlPathType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 设置控件的父类
     */</span>
    <span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> AbstractControl<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 监听此控件的值的变化
     *
     * @param cb 值改变时的回调
     * @param options 监听参数
     */</span>
    <span class="token function">watchValue</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> WatchCallback<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle<span class="token punctuation">;</span>
    <span class="token comment">/**
     * 监听此控件的验证状态的变化
     *
     * @param cb 状态改变时的回调
     * @param options 监听参数
     */</span>
    <span class="token function">watchStatus</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> WatchCallback<span class="token operator">&lt;</span>ValidateStatus<span class="token punctuation">,</span> ValidateStatus <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>`,1)),a[14]||(a[14]=n("h3",{id:"FormControl"},[n("span",null,"FormControl"),n("a",{onclick:"window.location.hash = 'FormControl'",class:"anchor"},"#")],-1)),a[15]||(a[15]=l(`<pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormControl<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> controls<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>
      _initValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
      validatorOrOptions<span class="token operator">?</span><span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> ValidatorOptions<span class="token punctuation">,</span>
      asyncValidator<span class="token operator">?</span><span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        dirty<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
        blur<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>`,1)),a[16]||(a[16]=n("h3",{id:"FormGroup"},[n("span",null,"FormGroup"),n("a",{onclick:"window.location.hash = 'FormGroup'",class:"anchor"},"#")],-1)),a[17]||(a[17]=l(`<pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormGroup<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object <span class="token operator">=</span> object<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> controls<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span>GroupControls<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>
      <span class="token comment">/**
       * 子控件的集合，它的键就是子控件注册时的 \`key\`
       */</span>
      controls<span class="token operator">:</span> GroupControls<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
      validatorOrOptions<span class="token operator">?</span><span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> ValidatorOptions<span class="token punctuation">,</span>
      asyncValidator<span class="token operator">?</span><span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        dirty<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
        blur<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token function">getValue</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        skipDisabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 向此控件组添加子控件
     *
     * @param key 被添加控件的键
     * @param control 被添加的控件
     */</span>
    <span class="token generic-function"><span class="token function">addControl</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> control<span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 从此控件组中删除子控件
     *
     * @param key 被删除控件的键
     */</span>
    <span class="token generic-function"><span class="token function">removeControl</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 替换现有的控件
     *
     * @param key 替换控件的键
     * @param control 替换的控件
     */</span>
    <span class="token generic-function"><span class="token function">setControl</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> control<span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>`,1)),a[18]||(a[18]=n("h3",{id:"FormArray"},[n("span",null,"FormArray"),n("a",{onclick:"window.location.hash = 'FormArray'",class:"anchor"},"#")],-1)),a[19]||(a[19]=l(`<pre class="language-ts"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FormArray<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> controls<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span>AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 子控件数组的长度
     */</span>
    <span class="token keyword">readonly</span> length<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>
      <span class="token comment">/**
       * 子控件的数组，每个子控件都有一个被注册的 \`index\`
       */</span>
      controls<span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      validatorOrOptions<span class="token operator">?</span><span class="token operator">:</span> ValidatorFn <span class="token operator">|</span> ValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> ValidatorOptions<span class="token punctuation">,</span>
      asyncValidator<span class="token operator">?</span><span class="token operator">:</span> AsyncValidatorFn <span class="token operator">|</span> AsyncValidatorFn<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">?</span> Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        dirty<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
        blur<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token function">getValue</span><span class="token punctuation">(</span>options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        skipDisabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 通过的 \`index\` 获取子控件
     *
     * @param index 子控件的下标
     */</span>
    <span class="token function">at</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 在数组末尾插入一个新的子控件
     *
     * @param control 添加的子控件
     */</span>
    <span class="token function">push</span><span class="token punctuation">(</span>control<span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 在数组中给定的 \`index\` 处插入一个新的子控件
     *
     * @param index 插入控件的下标
     * @param control 插入的子控件
     */</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> control<span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 删除数组中给定 \`index\` 处的子控件。
     *
     * @param index 删除控件的下标
     */</span>
    <span class="token function">removeAt</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 清空数组中的所有子空间
     */</span>
    <span class="token function">clearControls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 替换数组中给定 \`index\` 处现有的子控件
     *
     * @param index 替换控件的下标
     * @param control 替换的控件
     */</span>
    <span class="token function">setControl</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> control<span class="token operator">:</span> AbstractControl<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>`,1))])}const bn=A(gn,[["render",yn]]),An={},Cn={class:"markdown site-doc-overview"};function wn(e,a){const p=q,c=B;return r(),m("section",Cn,[o(c,{class:"site-anchor",affix:"",offset:16},{default:k(()=>[o(p,{href:"#表单控制器",title:"表单控制器"},{default:k(()=>[o(p,{href:"#实现支持控制器的表单输入控件",title:"实现支持控制器的表单输入控件"}),o(p,{href:"#实现支持控制器的表单容器组件",title:"实现支持控制器的表单容器组件"}),o(p,{href:"#使用响应式表单",title:"使用响应式表单"})]),_:1}),o(p,{href:"#表单验证",title:"表单验证"},{default:k(()=>[o(p,{href:"#验证器函数 (Validator)",title:"验证器函数 (Validator)"}),o(p,{href:"#内置验证器函数",title:"内置验证器函数"}),o(p,{href:"#自定义同步验证器",title:"自定义同步验证器"}),o(p,{href:"#跨字段交叉验证",title:"跨字段交叉验证"}),o(p,{href:"#自定义异步验证器",title:"自定义异步验证器"}),o(p,{href:"#FAQ",title:"FAQ"})]),_:1})]),_:1}),a[0]||(a[0]=n("p",null,[n("strong",null,"响应式表单"),s("提供了一种模型驱动的方式来处理表单输入。本文会向你展示如何创建和更新基本的表单控件，接下来还会在一个表单组中使用多个控件，验证表单的值，以及创建动态表单，也就是在运行期添加或移除控件。")],-1)),a[1]||(a[1]=n("p",null,"响应式表单使用显式的、不可变的方式，管理表单在特定的时间点上的状态。对表单状态的每一次变更都会返回一个新的状态，这样可以在变化时维护模型的整体性。",-1)),a[2]||(a[2]=n("h2",{id:"表单控制器"},[n("span",null,"表单控制器"),n("a",{onclick:"window.location.hash = '表单控制器'",class:"anchor"},"#")],-1)),a[3]||(a[3]=l("<ul><li><code>AbstractControl</code>: 它提供了一些所有控件和控件组共有的行为，比如运行验证器、计算状态和重置状态，还定义了一些所有子类共享的属性，如 <code>value</code>、<code>status</code>。它是 <code>FormControl</code>、<code>FormGroup</code> 和 <code>FormArray</code> 的基类,不允许直接实例化它。</li><li><code>FormControl</code>: 它用于跟踪独立表单控件的值和验证状态，实现了关于访问值、验证状态、用户交互和事件的大部分基本功能。</li><li><code>FormGroup</code>: 它用于跟踪一组控件实例的值和有效性状态，它把每个子控件的值聚合进一个对象。它通过归集其子控件的状态值来计算出自己的状态。 比如，如果组中的任何一个控件是无效的，那么整个组就是无效的。</li><li><code>FormArray</code>: 它用于跟踪一个控件数组实例的值和有效性状态，它把每个子控件的值聚合进一个数组。它通过归集其子控件的状态值来计算出自己的状态。 比如，如果数组中的任何一个控件是无效的，那么整个数组就是无效的。</li></ul>",1)),a[4]||(a[4]=n("h3",{id:"实现支持控制器的表单输入控件"},[n("span",null,"实现支持控制器的表单输入控件"),n("a",{onclick:"window.location.hash = '实现支持控制器的表单输入控件'",class:"anchor"},"#")],-1)),a[5]||(a[5]=l(`<p>自定义一个支持 <code>AbstractControl</code> 的输入控件。</p><p>更多实现细节，请参考：<a href="https://github.com/IDuxFE/idux/blob/main/packages/components/input/src/Input.tsx" target="_blank" rel="noopener">IxInput</a> 或其他输入型组件。</p><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accessor.value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accessor.disabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onBlur<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onInput<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> AbstractControl<span class="token punctuation">,</span> useAccessorAndControl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@idux/cdk/forms&#39;</span>

defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  control<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token punctuation">(</span>string <span class="token operator">|</span> number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> AbstractControl
  disabled<span class="token operator">?</span><span class="token operator">:</span> boolean
  value<span class="token operator">?</span><span class="token operator">:</span> string
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// useAccessorAndControl 内部对 props 中的 control, disabled, value 进行了处理</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> accessor<span class="token punctuation">,</span> <span class="token literal-property property">control</span><span class="token operator">:</span> controlRef <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAccessorAndControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 还可以在 FormItem 组件中注册 control, 让 FormItem 获取控件的验证状态</span>
<span class="token comment">// useFormItemRegister(controlRef)</span>

<span class="token comment">// 表单 blur 状态</span>
<span class="token keyword">const</span> <span class="token function-variable function">onBlur</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> accessor<span class="token punctuation">.</span><span class="token function">markAsBlurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 表单值发生变更后的回调</span>
<span class="token keyword">const</span> <span class="token function-variable function">onInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">evt</span><span class="token operator">:</span> Event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement
  accessor<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre>`,3)),a[6]||(a[6]=n("h3",{id:"实现支持控制器的表单容器组件"},[n("span",null,"实现支持控制器的表单容器组件"),n("a",{onclick:"window.location.hash = '实现支持控制器的表单容器组件'",class:"anchor"},"#")],-1)),a[7]||(a[7]=l(`<p>自定以一个支持 <code>AbstractControl</code> 的表单组件。</p><p>更多实现细节，请参考：<a href="https://github.com/IDuxFE/idux/blob/main/packages/components/form/src/Form.tsx" target="_blank" rel="noopener">Form</a> 与 <a href="https://github.com/IDuxFE/idux/blob/main/packages/components/form/src/FormItem.tsx" target="_blank" rel="noopener">FormItem</a>。</p><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> AbstractControl<span class="token punctuation">,</span> <span class="token constant">FORMS_CONTROL_TOKEN</span><span class="token punctuation">,</span> useControl <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@idux/cdk/forms&#39;</span>

defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  control<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token punctuation">(</span>string <span class="token operator">|</span> number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> AbstractControl
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 通过 props.control 拿到真正的 control(AbstractControl)</span>
<span class="token keyword">const</span> controlRef <span class="token operator">=</span> <span class="token function">useControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 注入 control, 以便子组件通过 key 获取对应的子 control</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token constant">FORMS_CONTROL_TOKEN</span><span class="token punctuation">,</span> controlRef<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre>`,3)),a[8]||(a[8]=n("h3",{id:"使用响应式表单"},[n("span",null,"使用响应式表单"),n("a",{onclick:"window.location.hash = '使用响应式表单'",class:"anchor"},"#")],-1)),a[9]||(a[9]=l(`<p>下例展示了最简单的用法, 包含了嵌套表单和表单数组，更多的使用场景和示例，参见 <a href="https://idux.site/components/form/zh" target="_blank" rel="noopener">@idux/components/form</a></p><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomForm</span> <span class="token attr-name">:control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>formGroup<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    Age: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    City: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address.city<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    Street: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address.street<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    Zip: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address.zip<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    Remark-0: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remarks.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    Remark-1:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remarks.1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    Remark-2:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomInput</span> <span class="token attr-name">control</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remarks.2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IxButton</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSubmit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>IxButton</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CustomForm</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Validators<span class="token punctuation">,</span> useFormGroup<span class="token punctuation">,</span> useFormArray <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@idux/cdk/forms&#39;</span>

<span class="token keyword">import</span> CustomForm <span class="token keyword">from</span> <span class="token string">&#39;./CustomForm.vue&#39;</span>
<span class="token keyword">import</span> CustomInput <span class="token keyword">from</span> <span class="token string">&#39;./CustomInput.vue&#39;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> required<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> email <span class="token punctuation">}</span> <span class="token operator">=</span> Validators

<span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token function">useFormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> required<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">street</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> required<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">zip</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> remarks <span class="token operator">=</span> <span class="token function">useFormArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;remark0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;remark1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;remark2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> formGroup <span class="token operator">=</span> <span class="token function">useFormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> required<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>required<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>email<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span> address<span class="token punctuation">,</span>
  <span class="token literal-property property">remarks</span><span class="token operator">:</span> remarks<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

formGroup<span class="token punctuation">.</span><span class="token function">watchValue</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;group value:&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>
formGroup<span class="token punctuation">.</span><span class="token function">watchStatus</span><span class="token punctuation">(</span><span class="token parameter">stats</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;group status:&#39;</span><span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> nameControl <span class="token operator">=</span> formGroup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span>
nameControl<span class="token punctuation">.</span><span class="token function">watchStatus</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;name value:&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>
nameControl<span class="token punctuation">.</span><span class="token function">watchStatus</span><span class="token punctuation">(</span><span class="token parameter">stats</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;name status:&#39;</span><span class="token punctuation">,</span> stats<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>formGroup<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span> formGroup<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;formGroup invalid: &#39;</span><span class="token punctuation">,</span> formGroup<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></code></pre>`,2)),a[10]||(a[10]=n("h2",{id:"表单验证"},[n("span",null,"表单验证"),n("a",{onclick:"window.location.hash = '表单验证'",class:"anchor"},"#")],-1)),a[11]||(a[11]=n("p",null,"通过验证用户输入的准确性和完整性，可以提高整体的数据质量。该页面显示了如何从 UI 验证用户输入，以及如何在响应式表单中显示有用的验证消息。",-1)),a[12]||(a[12]=n("p",null,[s("在响应式表单中，应该在组件类中直接把验证器函数添加到表单控件模型上（"),n("code",null,"AbstractControl"),s("）。一旦控件发生了变化，就会调用这些函数。")],-1)),a[13]||(a[13]=n("h3",{id:"验证器函数 (Validator)"},[n("span",null,"验证器函数 (Validator)"),n("a",{onclick:"window.location.hash = '验证器函数 (Validator)'",class:"anchor"},"#")],-1)),a[14]||(a[14]=n("p",null,"验证器函数可以是同步函数，也可以是异步函数。",-1)),a[15]||(a[15]=n("ul",null,[n("li",null,[s("同步验证器：这些同步函数接受一个控件实例，如果验证失败，会返回一组验证错误。可以在实例化一个 "),n("code",null,"AbstractControl"),s(" 时把它作为构造函数的第二个参数传进去。")]),n("li",null,[s("异步验证器：这些异步函数接受一个控件实例并返回一个 "),n("code",null,"Promise"),s("，如果验证失败，它稍后会发出一组验证错误。在实例化 "),n("code",null,"AbstractControl"),s(" 时，可以把它们作为第三个参数传入。")])],-1)),a[16]||(a[16]=n("p",null,"出于性能方面的考虑，只有在所有同步验证器都通过之后，才会运行异步验证器。当每一个异步验证器都执行完之后，才会设置这些验证错误。",-1)),a[17]||(a[17]=n("h3",{id:"内置验证器函数"},[n("span",null,"内置验证器函数"),n("a",{onclick:"window.location.hash = '内置验证器函数'",class:"anchor"},"#")],-1)),a[18]||(a[18]=l(`<p><code>@idux/cdk/forms</code> 提供了一些常见的内置验证器。</p><pre class="language-ts"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Validators<span class="token punctuation">,</span> useFormGroup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@idux/cdk/forms&#39;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> required<span class="token punctuation">,</span> minLength<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max <span class="token punctuation">}</span> <span class="token operator">=</span> Validators
<span class="token keyword">const</span> formGroup <span class="token operator">=</span> <span class="token function">useFormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>required<span class="token punctuation">,</span> <span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在上面的示例中，<code>name</code> 设置了 2 个内置验证器，<code>required</code> 和 <code>minLength(3)</code>, 而 <code>age</code> 则设置了 1 个验证器 <code>min(6)</code>.</p><p>所有这些验证器都是同步的，所以它们作为第二个参数传递。</p>`,4)),a[19]||(a[19]=n("h3",{id:"自定义同步验证器"},[n("span",null,"自定义同步验证器"),n("a",{onclick:"window.location.hash = '自定义同步验证器'",class:"anchor"},"#")],-1)),a[20]||(a[20]=l(`<p>内置的验证器并不是总能精确匹配应用中的用例，因此有时你需要创建一个自定义验证器。</p><pre class="language-ts"><code><span class="token keyword">const</span> mobilePhoneValidator <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> ValidateErrors <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value <span class="token operator">||</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^1\\d{10}$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> mobilePhone<span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Mobile phone number is not valid&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> confirmPasswordValidator <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> control<span class="token operator">:</span> AbstractControl<span class="token punctuation">)</span><span class="token operator">:</span> ValidateErrors <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> passwordRequired<span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Please confirm your password&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> control<span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> passwordConfirm<span class="token operator">:</span>  <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Two passwords that you enter is inconsistent&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> formGroup <span class="token operator">=</span> <span class="token function">useFormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  password<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>required<span class="token punctuation">,</span> <span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  confirmPassword<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>required<span class="token punctuation">,</span> confirmPasswordValidator<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  phoneNumber<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> mobilePhoneValidator<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在上面的示例中，<code>mobilePhoneValidator</code> 是一个手机号码的验证器，如果验证失败，他会返回一个包含错误提示的对象。<code>confirmPasswordValidator</code> 是一个二次确认密码的验证器，他会通过 <code>root</code> 找到需要比对的值，然后进行验证。</p>`,3)),a[21]||(a[21]=n("h3",{id:"跨字段交叉验证"},[n("span",null,"跨字段交叉验证"),n("a",{onclick:"window.location.hash = '跨字段交叉验证'",class:"anchor"},"#")],-1)),a[22]||(a[22]=l(`<p>其实上面的 <code>confirmPasswordValidator</code> 就是一个跨字段验证器，你可以通过第二个参数 <code>control</code> 的父控制器 (<code>control.parent</code>) 或者根控制器 (<code>control.root</code>) 来获取其他兄弟控件。</p><p>另外，你还可以在他们共同的祖先控件中执行验证函数。</p><pre class="language-ts"><code>
<span class="token keyword">const</span> confirmPasswordValidator <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> control<span class="token operator">:</span> AbstractControl<span class="token punctuation">)</span><span class="token operator">:</span> ValidateErrors <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> password <span class="token operator">=</span> control<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> confirmPassword <span class="token operator">=</span> control<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;confirmPassword&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> confirmPassword<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> passwordConfirm<span class="token operator">:</span>  <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;Two passwords that you enter is inconsistent&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> formGroup <span class="token operator">=</span> <span class="token function">useFormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  password<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>required<span class="token punctuation">,</span> <span class="token function">minLength</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  confirmPassword<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>required<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> validators<span class="token operator">:</span> <span class="token punctuation">[</span>confirmPasswordValidator<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>`,3)),a[23]||(a[23]=n("h3",{id:"自定义异步验证器"},[n("span",null,"自定义异步验证器"),n("a",{onclick:"window.location.hash = '自定义异步验证器'",class:"anchor"},"#")],-1)),a[24]||(a[24]=l(`<p>其实异步验证器和上面的同步验证器很像，只是它们必须返回一个稍后会输出 <code>undefined</code> 或验证错误对象的承诺 (Promise)。</p><pre class="language-ts"><code><span class="token keyword">const</span> usernameValidator <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> ValidateErrors <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span>resolve <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> error <span class="token operator">=</span> name <span class="token operator">===</span> <span class="token string">&#39;tom&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&#39;The username is redundant&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>  
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> formGroup <span class="token operator">=</span> <span class="token function">useFormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  username<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> required<span class="token punctuation">,</span> usernameValidator<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>`,2)),a[25]||(a[25]=n("h4",{id:"优化异步验证器的性能"},[n("span",null,"优化异步验证器的性能"),n("a",{onclick:"window.location.hash = '优化异步验证器的性能'",class:"anchor"},"#")],-1)),a[26]||(a[26]=l(`<p>默认情况下，所有验证程序在每次表单值更改后都会运行。对于同步验证器，这通常不会对应用性能产生明显的影响。但是，异步验证器通常会执行某种 HTTP 请求来验证控件。每次按键后调度一次 HTTP 请求都会给后端 API 带来压力，应该尽可能避免。</p><p>你可以把 <code>trigger</code> 属性从 <code>change</code>（默认值）改成 <code>blur</code> 或 <code>submit</code> 来推迟表单验证的时机。</p><pre class="language-ts"><code><span class="token keyword">const</span> formGroup <span class="token operator">=</span> <span class="token function">useFormGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  username<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
    trigger<span class="token operator">:</span> <span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span>
    validators<span class="token operator">:</span> required<span class="token punctuation">,</span>
    asyncValidators<span class="token operator">:</span> usernameValidator
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>`,3)),a[27]||(a[27]=n("h3",{id:"FAQ"},[n("span",null,"FAQ"),n("a",{onclick:"window.location.hash = 'FAQ'",class:"anchor"},"#")],-1)),a[28]||(a[28]=n("h4",{id:"更多的使用示例和场景？"},[n("span",null,"更多的使用示例和场景？"),n("a",{onclick:"window.location.hash = '更多的使用示例和场景？'",class:"anchor"},"#")],-1)),a[29]||(a[29]=n("p",null,[s("参见 "),n("a",{href:"https://idux.site/components/form/zh",target:"_blank",rel:"noopener"},"@idux/components/form")],-1)),a[30]||(a[30]=n("h4",{id:"更多的使用细节和文档？"},[n("span",null,"更多的使用细节和文档？"),n("a",{onclick:"window.location.hash = '更多的使用细节和文档？'",class:"anchor"},"#")],-1)),a[31]||(a[31]=n("p",null,[s("参见 "),n("a",{href:"https://angular.cn/guide/forms-overview",target:"_blank",rel:"noopener"},"@angular/forms")],-1))])}const Fn=A(An,[["render",wn]]),vn={name:"DocsCdkForms",components:{DemoBasic:cn,DemoCustomInput:un,DemoCustomForm:mn,ApiDocs:bn,OverviewDocs:Fn},setup(){var d;const e=Q(),a=U(),p=O((d=e.query.tab)!=null?d:"demo");Z(p,u=>{a.push({query:{tab:u}})});const c=[{label:"示例",value:"demo"},{label:"API",value:"api"},{label:"概述",value:"overview"},,,].filter(Boolean),g=O(!1);return{checkedDoc:p,docRadioData:c,showDevDemo:g}}},Vn={class:"site-doc-wrapper"},hn={class:"markdown site-doc-header"},En={class:"site-doc-demo"};function xn(e,a,p,c,g,d){const u=K,i=q,V=B,f=b("DemoBasic"),t=b("DemoCustomInput"),h=b("DemoCustomForm"),S=b("ApiDocs"),P=b("OverviewDocs");return r(),m("article",Vn,[n("section",hn,[a[1]||(a[1]=n("h1",null,[s("Forms"),n("span",{class:"subtitle"},"表单")],-1)),a[2]||(a[2]=n("div",{class:"markdown site-doc-description"},null,-1)),o(u,{value:c.checkedDoc,"onUpdate:value":a[0]||(a[0]=N=>c.checkedDoc=N),dataSource:c.docRadioData,size:"lg",gap:"16px",mode:"primary",buttoned:""},null,8,["value","dataSource"])]),E(n("section",En,[o(V,{class:"site-anchor",affix:"",offset:16},{default:k(()=>[(c.showDevDemo,r(),C(i,{key:0,href:"#cdk-forms-basic",title:"基本使用"})),(c.showDevDemo,r(),C(i,{key:1,href:"#cdk-forms-custom-input",title:"自定义输入控件"})),(c.showDevDemo,r(),C(i,{key:2,href:"#cdk-forms-custom-form",title:"自定义表单"}))]),_:1}),o(f),o(t),o(h)],512),[[x,c.checkedDoc==="demo"]]),E(o(S,null,null,512),[[x,c.checkedDoc==="api"]]),E(o(P,null,null,512),[[x,c.checkedDoc==="overview"]])])}const Gn=A(vn,[["render",xn]]);export{Gn as default};
