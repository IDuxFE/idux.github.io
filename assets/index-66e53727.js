import{a7 as q,aO as G,aX as T,aY as W,q as I,c as u,x as K,R,a_ as X,a$ as Y,d as Z,as as O,aZ as _,an as E,v as H,f as h,$ as U,aW as J}from"./index-2f15ff81.js";/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const L={value:[Number,null],control:{type:[String,Number,Object,Array],default:void 0},disabled:{type:Boolean,default:!1},formatter:Function,keyboard:{type:Boolean,default:void 0},max:{type:Number,default:1/0},min:{type:Number,default:-1/0},placeholder:String,precision:Number,readonly:{type:Boolean,default:!1},size:String,status:String,step:{type:Number,default:1},"onUpdate:value":[Function,Array],onChange:[Function,Array],onFocus:[Function,Array],onBlur:[Function,Array]};/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */function Q(a,r){const{accessor:l,control:F}=q();G(F);const C=T(a,r),k=W(a,F),V=I(""),s=I(""),b=I(!0),c=u(()=>{var e;return(e=l.value)!=null?e:void 0}),v=u(()=>{var e;return(e=a.keyboard)!=null?e:r.keyboard}),y=u(()=>l.disabled),M=u(()=>a.readonly||!!c.value&&c.value<=a.min),p=u(()=>a.readonly||!!c.value&&c.value>=a.max),m=u(()=>{const e=j(a.step);return a.precision!==void 0?a.precision:Math.max(j(l.value),e)}),B=u(()=>f(-a.step)<a.min),$=u(()=>f(a.step)>a.max),d=e=>{if(V.value=e,!e){s.value=e;return}a.formatter?s.value=a.formatter(Number(e)):s.value=e};function f(e){const{value:n}=l;let o=e;return typeof n=="number"&&!Number.isNaN(n)&&(o=parseFloat((n+e).toFixed(m.value))),Math.max(a.min,Math.min(a.max,o))}function N(){const{value:e}=l;if(!e&&e!==0||!String(e).trim())d("");else if(Number.isNaN(Number(e))||typeof e!="number"&&typeof e!="string")d("");else{const n=Number(e);(s.value===""||n!==Number(s.value))&&d(n.toFixed(m.value))}}function D(){const{value:e}=s,n=parseFloat(Number(e).toFixed(m.value));if(e==="")i(null);else if(Number.isNaN(n))N();else{const o=Math.max(a.min,Math.min(a.max,n));d(o.toFixed(m.value)),i(o)}}function i(e){const n=X(l.value);e!==n&&(l.setValue(e),R(a.onChange,e,n),Y(()=>{e!==l.value&&N()}))}function z(e){const{value:n}=e.target,o=n.trim().replace(/ã€‚/g,".");if(d(o),o===""){i(null);return}const A=Number(o);Number.isNaN(A)||A>=a.min&&A<=a.max&&i(A)}function x(){if(a.readonly||y.value||B.value)return;const e=f(-a.step);i(e)}function w(){if(a.readonly||y.value||$.value)return;const e=f(a.step);i(e)}function S(e){v.value&&(e.code==="Enter"||e.code==="NumpadEnter"?D():e.code==="ArrowUp"?(e.preventDefault(),w()):e.code==="ArrowDown"&&(e.preventDefault(),x()))}const g=I(!1);function P(e){g.value=!0,R(a.onFocus,e)}function t(e){g.value=!1,D(),l.markAsBlurred(),R(a.onBlur,e)}return K(V,e=>{if(e!==""){const n=Number(e);b.value=Number.isNaN(n)||n<a.min||n>a.max}else b.value=!1},{immediate:!0}),K(()=>l.value,()=>N(),{immediate:!0}),{mergedSize:C,mergedStatus:k,displayValue:s,isIllegal:b,isDisabled:y,isDisabledDec:M,isDisabledInc:p,isFocused:g,nowValue:c,handleKeyDown:S,handleDec:x,handleInc:w,handleInput:z,handleFocus:P,handleBlur:t}}function j(a){if(a==null)return 0;const r=String(a).split(".")[1];return r?r.length:0}/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const ee=Z({name:"IxInputNumber",props:L,setup(a,{expose:r,slots:l}){const F=O("common"),C=O("inputNumber"),{mergedSize:k,mergedStatus:V,displayValue:s,nowValue:b,isIllegal:c,isDisabled:v,isDisabledDec:y,isDisabledInc:M,isFocused:p,handleInput:m,handleFocus:B,handleBlur:$,handleKeyDown:d,handleDec:f,handleInc:N}=Q(a,C),{elementRef:D,focus:i,blur:z}=_({handleBlur:$,handleFocus:B});r({focus:i,blur:z});const x=u(()=>`${F.prefixCls}-input-number`),w=u(()=>{const t=x.value;return E({[t]:!0,[`${t}-illegal`]:c.value})}),S=I();H(()=>{D.value=S.value.getInputElement()});const g=t=>{t.stopPropagation(),N()},P=t=>{t.stopPropagation(),f()};return()=>{const t=x.value,e={...l,suffix:()=>[h("span",{key:"increase",class:E({[`${t}-increase`]:!0,[`${t}-increase-disabled`]:v.value||M.value}),role:"button",onClick:g},[h(U,{name:"up"},null)]),h("span",{key:"decrease",class:E({[`${t}-decrease`]:!0,[`${t}-decrease-disabled`]:v.value||y.value}),role:"button",onClick:P},[h(U,{name:"down"},null)])]};return h(J,{class:w.value,ref:S,type:"text",autocomplete:"off","aria-valuemin":a.min,"aria-valuemax":a.max,"aria-valuenow":b.value,disabled:v.value,focused:p.value,readonly:a.readonly,placeholder:a.placeholder,size:k.value,status:V.value,value:s.value,onInput:m,onKeydown:d},e)}}});/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const ne=ee;export{ne as I};
