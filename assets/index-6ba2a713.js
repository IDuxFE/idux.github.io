import{v as E,ab as C,aI as M,u as I}from"./index-b887bcb8.js";import{v as P,i as S,e as r,y as d,l as V,a as _,a2 as w,j,b as B,p as T}from"./vendor-4521613a.js";/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const x=Symbol("progressContext");/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const $=100;function G(s){return!s||s<0?0:s>$?$:s}const L=s=>{const t=[];return Object.keys(s).forEach(e=>{const o=parseFloat(e.replace(/%/g,""));isNaN(o)||t.push({key:o,value:s[e]})}),t.sort((e,o)=>e.key-o.key)},X=(s,t)=>{const{from:e=t?getComputedStyle(t).getPropertyValue("--ix-color-primary"):"#1c6eff",to:o=t?getComputedStyle(t).getPropertyValue("--ix-color-primary"):"#1c6eff",direction:a="to right",...n}=s;if(Object.keys(n).length!==0){const l=L(n).map(({key:i,value:f})=>`${f} ${i}%`).join(", ");return`linear-gradient(${a}, ${l})`}return`linear-gradient(${a}, ${e}, ${o})`},Y=s=>L(s).map(({key:t,value:e})=>({offset:`${t}%`,color:e})),N=P({setup(s,{slots:t}){const{props:e,config:o,mergedPrefixCls:a,status:n,percent:l,successPercent:i}=S(x),f=r(()=>e.format??o.format),v=r(()=>f.value(l.value,i.value)),h=r(()=>n.value==="success"||n.value==="normal"&&l.value===$),u=r(()=>n.value==="exception"),m=r(()=>_(e.format)||!(h.value||u.value)),k=r(()=>{var p;return((p=e.icons)==null?void 0:p.success)??o.icon.success}),c=r(()=>{var p;return((p=e.icons)==null?void 0:p.exception)??o.icon.exception}),y=()=>{if(m.value)return v.value;const p=a.value;return h.value&&k.value?D(k.value,`${p}-success-icon`):u.value&&c.value?D(c.value,`${p}-exception-icon`):null};return()=>{if(e.hideInfo)return null;const p=t.format??t.default;return d("div",{class:`${a.value}-info`},[p?p({percent:l.value,successPercent:i.value}):y()])}}});function D(s,t){return V(s)?d(E,{class:t,name:s},null):s}const q=6,K=P({name:"IxProgressCircle",setup(s,{slots:t}){const{props:e,mergedPrefixCls:o,mergedStrokeLinecap:a,percent:n,successPercent:l}=S(x),i=r(()=>`${o.value}-circle`),f=r(()=>C(e.strokeWidth,q)),v=r(()=>j(e.strokeColor)),h=r(()=>`${o.value}-gradient-${M()}`),u=r(()=>{const g=e.type==="circle",b=50-f.value/2;return{isGradient:v.value,percent:n.value,linearGradientId:h.value,radius:b,gapPosition:e.gapPosition??(g?"top":"bottom"),len:Math.PI*2*b,gapDegree:C(e.gapDegree??(g?0:75))}}),m=r(()=>v.value?Y(e.strokeColor):[]),k=R(u),c=H(u),y=J(u,i,e,n,l),p=r(()=>({stroke:e.trailColor??"#f5f5f5","fill-opacity":"0","stroke-linecap":a.value,"stroke-width":f.value,d:k.value})),z=r(()=>({"fill-opacity":"0","stroke-linecap":a.value,"stroke-width":n.value?f.value:0,d:k.value})),O=r(()=>{const g=i.value;return{[g]:!0,[`${g}-gradient`]:v.value}}),W=r(()=>({width:e.width&&`${e.width}px`,height:e.width&&`${e.width}px`,fontSize:e.width&&`${C(e.width)*.15+6}px`})),F=()=>v.value?d("defs",null,[d("linearGradient",{id:h.value,x1:"100%",y1:"0%",x2:"0%",y2:"0%"},[m.value.map(g=>d("stop",{offset:g.offset,"stop-color":g.color},null))])]):null,A=()=>y.value.map(g=>d("path",w({class:[`${i.value}-path`,...g.strokeClasses],style:g.strokePathStyle,stroke:g.stroke},z.value),null));return()=>d("div",{class:O.value,style:W.value},[d("svg",{viewBox:"0 0 100 100"},[F(),d("path",w({class:`${i.value}-trail`,style:c.value},p.value),null),A()]),d(N,null,t)])}});function R(s){return r(()=>{const{radius:t,gapPosition:e}=s.value;let o=0,a=-t,n=0,l=t*-2;switch(e){case"left":o=-t,a=0,n=t*2,l=0;break;case"right":o=t,a=0,n=t*-2,l=0;break;case"bottom":a=t,l=t*2;break}return`M 50,50 m ${o},${a}
       a ${t},${t} 0 1 1 ${n},${-l}
       a ${t},${t} 0 1 1 ${-n},${l}`})}function H(s){return r(()=>{const{len:t,gapDegree:e}=s.value;return{strokeDasharray:`${t-e}px ${t}px`,strokeDashoffset:`-${e/2}px`,transition:"stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s"}})}function J(s,t,e,o,a){return r(()=>{var u;const{gapDegree:n,len:l,isGradient:i,linearGradientId:f}=s.value,v=a.value>0?[a.value,o.value]:[o.value],h=(u=e.success)==null?void 0:u.strokeColor;return v.map((m,k)=>{const c=v.length>1&&k===0;return{stroke:i&&!c?`url(#${f})`:void 0,strokeClasses:[!i&&c?`${t.value}-success`:"",i?"":`${t.value}-bg`],strokePathStyle:{stroke:i?void 0:c?h:e.strokeColor,transition:"stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s",strokeDasharray:`${m/100*(l-n)}px ${l}px`,strokeDashoffset:`-${n/2}px`}}}).reverse()})}const Q=P({name:"IxProgressLine",setup(s,{slots:t}){const{props:e,mergedPrefixCls:o,mergedSize:a,mergedStrokeLinecap:n,percent:l,successPercent:i}=S(x),f=r(()=>`${o.value}-line`),v=B(),h=r(()=>{const c=f.value;return{[c]:!0,[`${c}-${a.value}`]:!0,[`${c}-round`]:n.value==="round"}}),u=r(()=>({background:e.trailColor})),m=r(()=>{var c;return{height:`${e.strokeWidth}px`,width:`${i.value}%`,background:(c=e.success)==null?void 0:c.strokeColor}}),k=r(()=>({height:`${e.strokeWidth}px`,width:`${l.value}%`,background:j(e.strokeColor)?X(e.strokeColor,v.value):e.strokeColor}));return()=>{const c=f.value;return d("div",{ref:v,class:h.value},[d("div",{class:`${c}-outer`},[d("div",{class:`${c}-inner`,style:u.value},[!!i.value&&d("div",{class:`${c}-success-bg`,style:m.value},null),d("div",{class:`${c}-bg`,style:k.value},null)])]),d(N,null,t)])}}});/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const U=["normal","success","exception","active"],Z={type:{type:String,default:"line"},format:Function,percent:{type:Number,default:0},status:String,hideInfo:{type:Boolean,default:!1},success:Object,trailColor:String,strokeColor:[String,Object],strokeLinecap:String,strokeWidth:Number,gapDegree:Number,gapPosition:String,width:{type:Number,default:132},size:String,icons:Object},ee=P({name:"IxProgress",props:Z,setup(s,{slots:t}){const e=I("progress"),o=I("common"),a=r(()=>`${o.prefixCls}-progress`),n=r(()=>G(s.percent)),l=r(()=>{var u;return G((u=s.success)==null?void 0:u.percent)}),i=r(()=>s.size??e.size),f=r(()=>s.strokeLinecap??e.strokeLinecap),v=r(()=>!U.includes(s.status)&&(n.value>=$||l.value>=$)?"success":s.status??"normal"),h=r(()=>{const u=a.value;return{[u]:!0,[`${u}-${v.value}`]:!!v.value}});return T(x,{props:s,config:e,mergedPrefixCls:a,mergedSize:i,mergedStrokeLinecap:f,percent:n,successPercent:l,status:v}),()=>{const u=s.type==="line"?Q:K;return d(u,{class:h.value},t)}}});/**
 * @license
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/IDuxFE/idux/blob/main/LICENSE
 */const re=ee;export{re as I};
